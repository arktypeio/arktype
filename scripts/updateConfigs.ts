import { join } from "node:path"
import { readJson } from "../@re-/node/src/index.js"
import { repoRoot } from "./common.js"
import { readFile, writeFile, writeJson } from "@re-/node"

console.log("Updating ./vscode/packageRelativeConfig...")

const repoVscodeDir = join(repoRoot, ".vscode")
const repoVscodeSettingsPath = join(repoVscodeDir, "settings.json")
const repoVscodeExtensionsPath = join(repoVscodeDir, "extensions.json")

// This dir is symlinked to by each individual package root
const packageVscodeDir = join(repoVscodeDir, "packageRelativeConfig")
const packageVscodeSettingsPath = join(packageVscodeDir, "settings.json")
const packageVscodeExtensionsPath = join(packageVscodeDir, "extensions.json")

const autoGeneratedKey = "THIS FILE IS AUTOGENERATED"
const autoGeneratedDescription =
    "Update '.vscode' in the repo root then run 'pnpm updateConfigs'."

const settingsData = readJson(repoVscodeSettingsPath)
// Relative to package, TS lib will be in node_modules up two directories
settingsData["typescript.tsdk"] = settingsData["typescript.tsdk"].replace(
    "./",
    "../../"
)
settingsData[autoGeneratedKey] = autoGeneratedDescription
writeJson(packageVscodeSettingsPath, settingsData)

// Extensions file contains no paths so we just add the warnings
const extensionsData = readJson(repoVscodeExtensionsPath)
extensionsData[autoGeneratedKey] = autoGeneratedDescription
writeJson(packageVscodeExtensionsPath, extensionsData)

console.log("Updating .prettierignore/.eslintignore...")
const GITIGNORE_PATH = join(repoRoot, ".gitignore")
// .eslintignore is symlinked to .prettierignore, so we don't need to do anything with it
const PRETTIERIGNORE_PATH = join(repoRoot, ".prettierignore")

const FORMAT_AUTOGEN_START =
    "# THIS SECTION IS AUTOGENERATED FROM .gitignore via scripts/updateConfigs.ts"
const FORMAT_AUTOGEN_END = "# END AUTOGENERATED"

const gitIgnoreLines = readFile(GITIGNORE_PATH).split("\n")
const prettierIgnoreLines = readFile(PRETTIERIGNORE_PATH).split("\n")
const linesToPreserve = prettierIgnoreLines.slice(
    prettierIgnoreLines.indexOf(FORMAT_AUTOGEN_END)
)
const linesToWrite = [
    FORMAT_AUTOGEN_START,
    gitIgnoreLines,
    FORMAT_AUTOGEN_END,
    linesToPreserve
]

writeFile(PRETTIERIGNORE_PATH, linesToWrite.join("\n"))
