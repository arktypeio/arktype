# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: Int
    notIn: [Int!]
}

type Mutation {
    createTest(data: TestCreateInput!): Test!
}

input NameUserIdCompoundUniqueInput {
    name: String!
    userId: Int!
}

input NullableIntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: Int
    notIn: [Int!]
}

input NullableStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

enum OrderByArg {
    asc
    desc
}

type Query {
    tests(
        cursor: TestWhereUniqueInput
        orderBy: TestOrderByInput
        skip: Int
        take: Int
        where: TestWhereInput
    ): [Test!]!
}

type Step {
    expected: String
    id: Int!
    key: String
    kind: StepKind!
    selector: String
    tests(
        cursor: TestWhereUniqueInput
        orderBy: TestOrderByInput
        skip: Int
        take: Int
        where: TestWhereInput
    ): [Test!]
    url: String
    User: User
    userId: Int
    value: String
}

input StepCreateManyWithoutTestsInput {
    connect: [StepWhereUniqueInput!]
    create: [StepCreateWithoutTestsInput!]
}

input StepCreateManyWithoutUserInput {
    connect: [StepWhereUniqueInput!]
    create: [StepCreateWithoutUserInput!]
}

input StepCreateWithoutTestsInput {
    expected: String
    key: String
    kind: StepKind!
    selector: String
    url: String
    User: UserCreateOneWithoutStepsInput
    value: String
}

input StepCreateWithoutUserInput {
    expected: String
    key: String
    kind: StepKind!
    selector: String
    tests: TestCreateManyWithoutStepsInput
    url: String
    value: String
}

input StepFilter {
    every: StepWhereInput
    none: StepWhereInput
    some: StepWhereInput
}

enum StepKind {
    assertText
    assertVisibility
    click
    go
    hover
    key
    screenshot
    set
}

input StepKindFilter {
    equals: StepKind
    in: [StepKind!]
    not: StepKind
    notIn: [StepKind!]
}

input StepOrderByInput {
    expected: OrderByArg
    id: OrderByArg
    key: OrderByArg
    kind: OrderByArg
    selector: OrderByArg
    url: OrderByArg
    userId: OrderByArg
    value: OrderByArg
}

input StepWhereInput {
    AND: [StepWhereInput!]
    expected: NullableStringFilter
    id: IntFilter
    key: NullableStringFilter
    kind: StepKindFilter
    NOT: [StepWhereInput!]
    OR: [StepWhereInput!]
    selector: NullableStringFilter
    tests: TestFilter
    url: NullableStringFilter
    User: UserWhereInput
    userId: NullableIntFilter
    value: NullableStringFilter
}

input StepWhereUniqueInput {
    id: Int
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

type Tag {
    id: Int!
    name: String!
    Test: Test
    testId: Int
    user: User!
    userId: Int!
}

input TagCreateManyWithoutTestInput {
    connect: [TagWhereUniqueInput!]
    create: [TagCreateWithoutTestInput!]
}

input TagCreateManyWithoutUserInput {
    connect: [TagWhereUniqueInput!]
    create: [TagCreateWithoutUserInput!]
}

input TagCreateWithoutTestInput {
    name: String!
    user: UserCreateOneWithoutTagsInput!
}

input TagCreateWithoutUserInput {
    name: String!
    Test: TestCreateOneWithoutTagsInput
}

input TagFilter {
    every: TagWhereInput
    none: TagWhereInput
    some: TagWhereInput
}

input TagOrderByInput {
    id: OrderByArg
    name: OrderByArg
    testId: OrderByArg
    userId: OrderByArg
}

input TagWhereInput {
    AND: [TagWhereInput!]
    id: IntFilter
    name: StringFilter
    NOT: [TagWhereInput!]
    OR: [TagWhereInput!]
    Test: TestWhereInput
    testId: NullableIntFilter
    user: UserWhereInput
    userId: IntFilter
}

input TagWhereUniqueInput {
    id: Int
    name_userId: NameUserIdCompoundUniqueInput
}

type Test {
    id: Int!
    name: String!
    steps(
        cursor: StepWhereUniqueInput
        orderBy: StepOrderByInput
        skip: Int
        take: Int
        where: StepWhereInput
    ): [Step!]
    tags(
        cursor: TagWhereUniqueInput
        orderBy: TagOrderByInput
        skip: Int
        take: Int
        where: TagWhereInput
    ): [Tag!]
    user: User!
    userId: Int!
}

input TestCreateInput {
    name: String!
    steps: StepCreateManyWithoutTestsInput
    tags: TagCreateManyWithoutTestInput
    user: UserCreateOneWithoutTestsInput!
}

input TestCreateManyWithoutStepsInput {
    connect: [TestWhereUniqueInput!]
    create: [TestCreateWithoutStepsInput!]
}

input TestCreateManyWithoutUserInput {
    connect: [TestWhereUniqueInput!]
    create: [TestCreateWithoutUserInput!]
}

input TestCreateOneWithoutTagsInput {
    connect: TestWhereUniqueInput
    create: TestCreateWithoutTagsInput
}

input TestCreateWithoutStepsInput {
    name: String!
    tags: TagCreateManyWithoutTestInput
    user: UserCreateOneWithoutTestsInput!
}

input TestCreateWithoutTagsInput {
    name: String!
    steps: StepCreateManyWithoutTestsInput
    user: UserCreateOneWithoutTestsInput!
}

input TestCreateWithoutUserInput {
    name: String!
    steps: StepCreateManyWithoutTestsInput
    tags: TagCreateManyWithoutTestInput
}

input TestFilter {
    every: TestWhereInput
    none: TestWhereInput
    some: TestWhereInput
}

input TestOrderByInput {
    id: OrderByArg
    name: OrderByArg
    userId: OrderByArg
}

input TestWhereInput {
    AND: [TestWhereInput!]
    id: IntFilter
    name: StringFilter
    NOT: [TestWhereInput!]
    OR: [TestWhereInput!]
    steps: StepFilter
    tags: TagFilter
    user: UserWhereInput
    userId: IntFilter
}

input TestWhereUniqueInput {
    id: Int
    name_userId: NameUserIdCompoundUniqueInput
}

type User {
    email: String!
    first: String!
    id: Int!
    last: String!
    password: String!
    steps(
        cursor: StepWhereUniqueInput
        orderBy: StepOrderByInput
        skip: Int
        take: Int
        where: StepWhereInput
    ): [Step!]
    tags(
        cursor: TagWhereUniqueInput
        orderBy: TagOrderByInput
        skip: Int
        take: Int
        where: TagWhereInput
    ): [Tag!]
    tests(
        cursor: TestWhereUniqueInput
        orderBy: TestOrderByInput
        skip: Int
        take: Int
        where: TestWhereInput
    ): [Test!]
}

input UserCreateOneWithoutStepsInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutStepsInput
}

input UserCreateOneWithoutTagsInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutTagsInput
}

input UserCreateOneWithoutTestsInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutTestsInput
}

input UserCreateWithoutStepsInput {
    email: String!
    first: String!
    last: String!
    password: String!
    tags: TagCreateManyWithoutUserInput
    tests: TestCreateManyWithoutUserInput
}

input UserCreateWithoutTagsInput {
    email: String!
    first: String!
    last: String!
    password: String!
    steps: StepCreateManyWithoutUserInput
    tests: TestCreateManyWithoutUserInput
}

input UserCreateWithoutTestsInput {
    email: String!
    first: String!
    last: String!
    password: String!
    steps: StepCreateManyWithoutUserInput
    tags: TagCreateManyWithoutUserInput
}

input UserWhereInput {
    AND: [UserWhereInput!]
    email: StringFilter
    first: StringFilter
    id: IntFilter
    last: StringFilter
    NOT: [UserWhereInput!]
    OR: [UserWhereInput!]
    password: StringFilter
    steps: StepFilter
    tags: TagFilter
    tests: TestFilter
}

input UserWhereUniqueInput {
    email: String
    id: Int
}
