### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

input ActionCreateWithoutDataInput {
    kind: ActionKind!
    steps: StepCreateWithoutActionInput
}

input ActionCreateWithoutStepsInput {
    data: ActionDataCreateWithoutActionsInput!
    kind: ActionKind!
}

input ActionDataCreateWithoutActionsInput {
    assertText: AssertTextDataCreateWithoutActionDatasInput
    assertVisibility: AssertVisibilityDataCreateWithoutActionDatasInput
    click: ClickDataCreateWithoutActionDatasInput
    go: GoDataCreateWithoutActionDatasInput
    hover: HoverDataCreateWithoutActionDatasInput
    key: KeyDataCreateWithoutActionDatasInput
    screenshot: ScreenshotDataCreateWithoutActionDatasInput
    set: SetDataCreateWithoutActionDatasInput
}

input ActionDataCreateWithoutAssertTextInput {
    actions: ActionCreateWithoutDataInput
    assertVisibility: AssertVisibilityDataCreateWithoutActionDatasInput
    click: ClickDataCreateWithoutActionDatasInput
    go: GoDataCreateWithoutActionDatasInput
    hover: HoverDataCreateWithoutActionDatasInput
    key: KeyDataCreateWithoutActionDatasInput
    screenshot: ScreenshotDataCreateWithoutActionDatasInput
    set: SetDataCreateWithoutActionDatasInput
}

input ActionDataCreateWithoutAssertVisibilityInput {
    actions: ActionCreateWithoutDataInput
    assertText: AssertTextDataCreateWithoutActionDatasInput
    click: ClickDataCreateWithoutActionDatasInput
    go: GoDataCreateWithoutActionDatasInput
    hover: HoverDataCreateWithoutActionDatasInput
    key: KeyDataCreateWithoutActionDatasInput
    screenshot: ScreenshotDataCreateWithoutActionDatasInput
    set: SetDataCreateWithoutActionDatasInput
}

enum ActionKind {
    assertText
    assertVisibility
    click
    go
    hover
    key
    screenshot
    set
}

input AssertTextDataCreateWithoutActionDatasInput {
    expected: String!
    selector: SelectorCreateWithoutAssertTextDatasInput!
}

input AssertTextDataCreateWithoutSelectorInput {
    actionDatas: ActionDataCreateWithoutAssertTextInput
    expected: String!
}

input AssertVisibilityDataCreateWithoutActionDatasInput {
    expected: Boolean!
    selector: SelectorCreateWithoutAssertVisibilityDatasInput!
}

input AssertVisibilityDataCreateWithoutSelectorInput {
    actionDatas: ActionDataCreateWithoutAssertVisibilityInput
    expected: Boolean!
}

input ClickDataCreateWithoutActionDatasInput {
    double: Boolean
    selector: String!
}

input GoDataCreateWithoutActionDatasInput {
    url: String!
}

input HoverDataCreateWithoutActionDatasInput {
    duration: Int!
    selector: String!
}

input KeyDataCreateWithoutActionDatasInput {
    key: String!
}

type Mutation {
    createTest(data: TestCreateInput!): Test!
    signIn(data: SignInInput!): String!
    signUp(data: SignUpInput!): String!
}

input NameUserCompoundUniqueInput {
    name: String!
}

type Query {
    me: User!
}

input ScreenshotDataCreateWithoutActionDatasInput

type Selector {
    css: String!
    id: Int!
}

input SelectorCreateWithoutAssertTextDatasInput {
    assertVisibilityDatas: AssertVisibilityDataCreateWithoutSelectorInput
    css: String!
}

input SelectorCreateWithoutAssertVisibilityDatasInput {
    assertTextDatas: AssertTextDataCreateWithoutSelectorInput
    css: String!
}

input SelectorWhereUniqueInput {
    id: Int
}

input SetDataCreateWithoutActionDatasInput {
    selector: String!
    value: String!
}

input SignInInput {
    email: String!
    password: String!
}

input SignUpInput {
    email: String!
    first: String!
    last: String!
    password: String!
}

type Step {
    id: Int!
}

input StepCreateWithoutActionInput {
    tests: TestCreateWithoutStepsInput
}

input StepCreateWithoutTestsInput {
    action: ActionCreateWithoutStepsInput!
}

input StepWhereUniqueInput {
    id: Int
}

type Tag {
    id: Int!
    name: String!
}

input TagCreateWithoutTestInput {
    name: String!
}

input TagWhereUniqueInput {
    id: Int
    name_user: NameUserCompoundUniqueInput
}

type Test {
    id: Int!
    name: String!
    steps(
        after: StepWhereUniqueInput
        before: StepWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Step!]!
    tags(
        after: TagWhereUniqueInput
        before: TagWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Tag!]!
}

input TestCreateInput {
    name: String!
    steps: StepCreateWithoutTestsInput
    tags: TagCreateWithoutTestInput
}

input TestCreateWithoutStepsInput {
    name: String!
    tags: TagCreateWithoutTestInput
}

input TestWhereUniqueInput {
    id: Int
    name_user: NameUserCompoundUniqueInput
}

type User {
    email: String!
    first: String!
    id: Int!
    last: String!
    password: String!
    selectors(
        after: SelectorWhereUniqueInput
        before: SelectorWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Selector!]!
    steps(
        after: StepWhereUniqueInput
        before: StepWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Step!]!
    tags(
        after: TagWhereUniqueInput
        before: TagWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Tag!]!
    tests(
        after: TestWhereUniqueInput
        before: TestWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Test!]!
}
