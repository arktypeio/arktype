### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

input ActionCreateManyWithoutDataInput {
    connect: [ActionWhereUniqueInput!]
    create: [ActionCreateWithoutDataInput!]
}

input ActionCreateOneWithoutStepsInput {
    connect: ActionWhereUniqueInput
    create: ActionCreateWithoutStepsInput
}

input ActionCreateWithoutDataInput {
    id: Int!
    kind: ActionKind!
    steps: StepCreateManyWithoutActionInput
}

input ActionCreateWithoutStepsInput {
    data: ActionDataCreateOneWithoutActionsInput!
    id: Int!
    kind: ActionKind!
}

input ActionDataCreateManyWithoutAssertTextInput {
    connect: [ActionDataWhereUniqueInput!]
    create: [ActionDataCreateWithoutAssertTextInput!]
}

input ActionDataCreateManyWithoutAssertVisibilityInput {
    connect: [ActionDataWhereUniqueInput!]
    create: [ActionDataCreateWithoutAssertVisibilityInput!]
}

input ActionDataCreateOneWithoutActionsInput {
    connect: ActionDataWhereUniqueInput
    create: ActionDataCreateWithoutActionsInput
}

input ActionDataCreateWithoutActionsInput {
    assertText: AssertTextDataCreateOneWithoutActionDatasInput
    assertVisibility: AssertVisibilityDataCreateOneWithoutActionDatasInput
    click: ClickDataCreateOneWithoutActionDatasInput
    go: GoDataCreateOneWithoutActionDatasInput
    hover: HoverDataCreateOneWithoutActionDatasInput
    id: Int!
    key: KeyDataCreateOneWithoutActionDatasInput
    screenshot: ScreenshotDataCreateOneWithoutActionDatasInput
    set: SetDataCreateOneWithoutActionDatasInput
}

input ActionDataCreateWithoutAssertTextInput {
    actions: ActionCreateManyWithoutDataInput
    assertVisibility: AssertVisibilityDataCreateOneWithoutActionDatasInput
    click: ClickDataCreateOneWithoutActionDatasInput
    go: GoDataCreateOneWithoutActionDatasInput
    hover: HoverDataCreateOneWithoutActionDatasInput
    id: Int!
    key: KeyDataCreateOneWithoutActionDatasInput
    screenshot: ScreenshotDataCreateOneWithoutActionDatasInput
    set: SetDataCreateOneWithoutActionDatasInput
}

input ActionDataCreateWithoutAssertVisibilityInput {
    actions: ActionCreateManyWithoutDataInput
    assertText: AssertTextDataCreateOneWithoutActionDatasInput
    click: ClickDataCreateOneWithoutActionDatasInput
    go: GoDataCreateOneWithoutActionDatasInput
    hover: HoverDataCreateOneWithoutActionDatasInput
    id: Int!
    key: KeyDataCreateOneWithoutActionDatasInput
    screenshot: ScreenshotDataCreateOneWithoutActionDatasInput
    set: SetDataCreateOneWithoutActionDatasInput
}

input ActionDataWhereUniqueInput {
    id: Int
}

enum ActionKind {
    assertText
    assertVisibility
    click
    go
    hover
    key
    screenshot
    set
}

input ActionWhereUniqueInput {
    id: Int
}

input AssertTextDataCreateManyWithoutSelectorInput {
    connect: [AssertTextDataWhereUniqueInput!]
    create: [AssertTextDataCreateWithoutSelectorInput!]
}

input AssertTextDataCreateOneWithoutActionDatasInput {
    connect: AssertTextDataWhereUniqueInput
    create: AssertTextDataCreateWithoutActionDatasInput
}

input AssertTextDataCreateWithoutActionDatasInput {
    expected: String!
    id: Int!
    selector: SelectorCreateOneWithoutAssertTextDatasInput!
}

input AssertTextDataCreateWithoutSelectorInput {
    actionDatas: ActionDataCreateManyWithoutAssertTextInput
    expected: String!
    id: Int!
}

input AssertTextDataWhereUniqueInput {
    id: Int
}

input AssertVisibilityDataCreateManyWithoutSelectorInput {
    connect: [AssertVisibilityDataWhereUniqueInput!]
    create: [AssertVisibilityDataCreateWithoutSelectorInput!]
}

input AssertVisibilityDataCreateOneWithoutActionDatasInput {
    connect: AssertVisibilityDataWhereUniqueInput
    create: AssertVisibilityDataCreateWithoutActionDatasInput
}

input AssertVisibilityDataCreateWithoutActionDatasInput {
    expected: Boolean!
    id: Int!
    selector: SelectorCreateOneWithoutAssertVisibilityDatasInput!
}

input AssertVisibilityDataCreateWithoutSelectorInput {
    actionDatas: ActionDataCreateManyWithoutAssertVisibilityInput
    expected: Boolean!
    id: Int!
}

input AssertVisibilityDataWhereUniqueInput {
    id: Int
}

input ClickDataCreateOneWithoutActionDatasInput {
    connect: ClickDataWhereUniqueInput
    create: ClickDataCreateWithoutActionDatasInput
}

input ClickDataCreateWithoutActionDatasInput {
    double: Boolean
    id: Int!
    selector: String!
}

input ClickDataWhereUniqueInput {
    id: Int
}

input GoDataCreateOneWithoutActionDatasInput {
    connect: GoDataWhereUniqueInput
    create: GoDataCreateWithoutActionDatasInput
}

input GoDataCreateWithoutActionDatasInput {
    id: Int!
    url: String!
}

input GoDataWhereUniqueInput {
    id: Int
}

input HoverDataCreateOneWithoutActionDatasInput {
    connect: HoverDataWhereUniqueInput
    create: HoverDataCreateWithoutActionDatasInput
}

input HoverDataCreateWithoutActionDatasInput {
    duration: Int!
    id: Int!
    selector: String!
}

input HoverDataWhereUniqueInput {
    id: Int
}

input KeyDataCreateOneWithoutActionDatasInput {
    connect: KeyDataWhereUniqueInput
    create: KeyDataCreateWithoutActionDatasInput
}

input KeyDataCreateWithoutActionDatasInput {
    id: Int!
    key: String!
}

input KeyDataWhereUniqueInput {
    id: Int
}

type Mutation {
    createTest(data: TestCreateInput!): Test!
    signIn(data: SignInInput!): String!
    signUp(data: SignUpInput!): String!
}

input NameUserCompoundUniqueInput {
    name: String!
}

type Query {
    me: User!
}

input ScreenshotDataCreateOneWithoutActionDatasInput {
    connect: ScreenshotDataWhereUniqueInput
    create: ScreenshotDataCreateWithoutActionDatasInput
}

input ScreenshotDataCreateWithoutActionDatasInput {
    id: Int!
}

input ScreenshotDataWhereUniqueInput {
    id: Int
}

type Selector {
    css: String!
    id: Int!
}

input SelectorCreateOneWithoutAssertTextDatasInput {
    connect: SelectorWhereUniqueInput
    create: SelectorCreateWithoutAssertTextDatasInput
}

input SelectorCreateOneWithoutAssertVisibilityDatasInput {
    connect: SelectorWhereUniqueInput
    create: SelectorCreateWithoutAssertVisibilityDatasInput
}

input SelectorCreateWithoutAssertTextDatasInput {
    assertVisibilityDatas: AssertVisibilityDataCreateManyWithoutSelectorInput
    css: String!
    id: Int!
}

input SelectorCreateWithoutAssertVisibilityDatasInput {
    assertTextDatas: AssertTextDataCreateManyWithoutSelectorInput
    css: String!
    id: Int!
}

input SelectorWhereUniqueInput {
    id: Int
}

input SetDataCreateOneWithoutActionDatasInput {
    connect: SetDataWhereUniqueInput
    create: SetDataCreateWithoutActionDatasInput
}

input SetDataCreateWithoutActionDatasInput {
    id: Int!
    selector: String!
    value: String!
}

input SetDataWhereUniqueInput {
    id: Int
}

input SignInInput {
    email: String!
    password: String!
}

input SignUpInput {
    email: String!
    first: String!
    last: String!
    password: String!
}

type Step {
    id: Int!
}

input StepCreateManyWithoutActionInput {
    connect: [StepWhereUniqueInput!]
    create: [StepCreateWithoutActionInput!]
}

input StepCreateManyWithoutTestsInput {
    connect: [StepWhereUniqueInput!]
    create: [StepCreateWithoutTestsInput!]
}

input StepCreateWithoutActionInput {
    id: Int!
    tests: TestCreateManyWithoutStepsInput
}

input StepCreateWithoutTestsInput {
    action: ActionCreateOneWithoutStepsInput!
    id: Int!
}

input StepWhereUniqueInput {
    id: Int
}

type Tag {
    id: Int!
    name: String!
}

input TagCreateManyWithoutTestInput {
    connect: [TagWhereUniqueInput!]
    create: [TagCreateWithoutTestInput!]
}

input TagCreateWithoutTestInput {
    id: Int!
    name: String!
}

input TagWhereUniqueInput {
    id: Int
    name_user: NameUserCompoundUniqueInput
}

type Test {
    id: Int!
    name: String!
    steps(
        after: StepWhereUniqueInput
        before: StepWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Step!]!
    tags(
        after: TagWhereUniqueInput
        before: TagWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Tag!]!
}

input TestCreateInput {
    id: Int!
    name: String!
    steps: StepCreateManyWithoutTestsInput
    tags: TagCreateManyWithoutTestInput
}

input TestCreateManyWithoutStepsInput {
    connect: [TestWhereUniqueInput!]
    create: [TestCreateWithoutStepsInput!]
}

input TestCreateWithoutStepsInput {
    id: Int!
    name: String!
    tags: TagCreateManyWithoutTestInput
}

input TestWhereUniqueInput {
    id: Int
    name_user: NameUserCompoundUniqueInput
}

type User {
    email: String!
    first: String!
    id: Int!
    last: String!
    password: String!
    selectors(
        after: SelectorWhereUniqueInput
        before: SelectorWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Selector!]!
    steps(
        after: StepWhereUniqueInput
        before: StepWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Step!]!
    tags(
        after: TagWhereUniqueInput
        before: TagWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Tag!]!
    tests(
        after: TestWhereUniqueInput
        before: TestWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Test!]!
}
