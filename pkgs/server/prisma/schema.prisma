datasource dev {
  provider = "sqlite"
  url      = env("SQLITE_URL")
  enabled  = env("ENABLE_SQLITE")
}

datasource prod {
  provider = "mysql"
  url      = env("MYSQL_URL")
  enabled  = env("ENABLE_MYSQL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model Tag {
  id   Int    @id @default(autoincrement())
  user User
  name String
  @@unique([name, user])
}

model Selector {
  id  Int    @id @default(autoincrement())
  css String
}

model Step {
  id     Int    @id @default(autoincrement())
  action Action
  tests  Test[]
}

model Test {
  id    Int    @id @default(autoincrement())
  user  User
  name  String
  steps Step[]
  tags  Tag[]
  @@unique([name, user])
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  first     String
  last      String
  steps     Step[]
  selectors Selector[]
  tags      Tag[]
  tests     Test[]
}

model Action {
  id   Int        @id @default(autoincrement())
  kind ActionKind
  data ActionData
}

enum ActionKind {
  click set hover key go screenshot assertText assertVisibility
}


model ActionData {
  id               Int                   @id @default(autoincrement())
  click            ClickData?
  set              SetData?
  hover            HoverData?
  key              KeyData?
  go               GoData?
  screenshot       ScreenshotData?
  assertText       AssertTextData?
  assertVisibility AssertVisibilityData?
}

model ClickData {
  id       Int     @id @default(autoincrement())
  selector String
  double   Boolean @default(false)
}

model SetData {
  id       Int    @id @default(autoincrement())
  selector String
  value    String
}

model HoverData {
  id       Int    @id @default(autoincrement())
  selector String
  duration Int
}

model KeyData {
  id  Int    @id @default(autoincrement())
  key String
}

model GoData {
  id  Int    @id @default(autoincrement())
  url String
}

model ScreenshotData {
  id Int @id @default(autoincrement())
}

model AssertTextData {
  id       Int      @id @default(autoincrement())
  selector Selector
  expected String
}

model AssertVisibilityData {
  id       Int      @id @default(autoincrement())
  selector Selector
  expected Boolean
}