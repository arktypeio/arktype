Info 0    [01:39:51.036] Starting TS Server
Info 1    [01:39:51.037] Version: 4.4.2
Info 2    [01:39:51.037] Arguments: /home/ssalb/.vscode-server-insiders/bin/aec6ee09fa1021cb59c7f4f4d000b027febc967d/node /home/ssalb/.nvm/versions/node/v16.8.0/pnpm-global/5/node_modules/typescript/lib/tsserver.js --useInferredProjectPerProjectRoot --enableTelemetry --cancellationPipeName /tmp/vscode-typescript1000/a09518dc6d40d5e0f4cd/tscancellation-b00a26e44a239a24a1a4.tmp* --logVerbosity terse --logFile /home/ssalb/.vscode-server-insiders/data/logs/20210904T110149/exthost5/vscode.typescript-language-features/tsserver-log-92RTDO/tsserver.log --globalPlugins typescript-vscode-sh-plugin,@vsintellicode/typescript-intellicode-plugin --pluginProbeLocations /home/ssalb/.vscode-server-insiders/bin/aec6ee09fa1021cb59c7f4f4d000b027febc967d/extensions/typescript-language-features,/home/ssalb/.vscode-server-insiders/extensions/visualstudioexptteam.vscodeintellicode-1.2.14 --locale en --noGetErrOnBackgroundUpdate --validateDefaultNpmLocation
Info 3    [01:39:51.037] Platform: linux NodeVersion: 14 CaseSensitive: true
Info 4    [01:39:51.037] ServerMode: undefined syntaxOnly: false hasUnknownServerMode: undefined
Info 5    [01:39:51.045] Host information vscode
Info 6    [01:39:51.046] Host watch options changed to undefined, it will be take effect for next watches.
Info 7    [01:39:51.047] Search path: /home/ssalb/redo/pkgs/statelessly-2/src
Info 8    [01:39:51.048] For info: /home/ssalb/redo/pkgs/statelessly-2/src/createStore.ts :: Config file name: /home/ssalb/redo/pkgs/statelessly-2/tsconfig.json
Info 9    [01:39:51.048] Creating configuration project /home/ssalb/redo/pkgs/statelessly-2/tsconfig.json
Info 10   [01:39:51.060] Config: /home/ssalb/redo/pkgs/statelessly-2/tsconfig.json : {
 "rootNames": [
  "/home/ssalb/redo/pkgs/statelessly-2/src/common.ts",
  "/home/ssalb/redo/pkgs/statelessly-2/src/createStore.ts",
  "/home/ssalb/redo/pkgs/statelessly-2/src/createTypes.ts",
  "/home/ssalb/redo/pkgs/statelessly-2/src/index.ts",
  "/home/ssalb/redo/pkgs/statelessly-2/src/utils.ts"
 ],
 "options": {
  "module": 99,
  "target": 99,
  "moduleResolution": 2,
  "sourceMap": true,
  "skipLibCheck": true,
  "strict": true,
  "isolatedModules": true,
  "esModuleInterop": true,
  "resolveJsonModule": true,
  "exactOptionalPropertyTypes": true,
  "noErrorTruncation": true,
  "declaration": true,
  "lib": [
   "lib.esnext.d.ts",
   "lib.dom.d.ts",
   "lib.dom.iterable.d.ts"
  ],
  "jsx": 2,
  "baseUrl": "/home/ssalb/redo/pkgs/statelessly-2/src",
  "outDir": "/home/ssalb/redo/pkgs/statelessly-2/dist",
  "configFilePath": "/home/ssalb/redo/pkgs/statelessly-2/tsconfig.json"
 }
}
Info 11   [01:39:51.062] Loading global plugin typescript-vscode-sh-plugin
Info 12   [01:39:51.062] Enabling plugin typescript-vscode-sh-plugin from candidate paths: /home/ssalb/.vscode-server-insiders/bin/aec6ee09fa1021cb59c7f4f4d000b027febc967d/extensions/typescript-language-features,/home/ssalb/.vscode-server-insiders/extensions/visualstudioexptteam.vscodeintellicode-1.2.14,/home/ssalb/.nvm/versions/node/v16.8.0/pnpm-global/5/node_modules/.pnpm/typescript@4.4.2/node_modules/typescript/lib/tsserver.js/../../..
Info 13   [01:39:51.062] Loading typescript-vscode-sh-plugin from /home/ssalb/.vscode-server-insiders/bin/aec6ee09fa1021cb59c7f4f4d000b027febc967d/extensions/typescript-language-features (resolved to /home/ssalb/.vscode-server-insiders/bin/aec6ee09fa1021cb59c7f4f4d000b027febc967d/extensions/typescript-language-features/node_modules)
Info 14   [01:39:51.064] typescript-vscode-sh-plugin active for version < 4.2 and JS/JSX files. Current version : 4.4.2
Info 15   [01:39:51.064] Intercepting getEncodedSemanticClassifications and getEncodedSyntacticClassifications.
Info 16   [01:39:51.064] Plugin validation succeeded
Info 17   [01:39:51.064] Loading global plugin @vsintellicode/typescript-intellicode-plugin
Info 18   [01:39:51.064] Enabling plugin @vsintellicode/typescript-intellicode-plugin from candidate paths: /home/ssalb/.vscode-server-insiders/bin/aec6ee09fa1021cb59c7f4f4d000b027febc967d/extensions/typescript-language-features,/home/ssalb/.vscode-server-insiders/extensions/visualstudioexptteam.vscodeintellicode-1.2.14,/home/ssalb/.nvm/versions/node/v16.8.0/pnpm-global/5/node_modules/.pnpm/typescript@4.4.2/node_modules/typescript/lib/tsserver.js/../../..
Info 19   [01:39:51.064] Loading @vsintellicode/typescript-intellicode-plugin from /home/ssalb/.vscode-server-insiders/bin/aec6ee09fa1021cb59c7f4f4d000b027febc967d/extensions/typescript-language-features (resolved to /home/ssalb/.vscode-server-insiders/bin/aec6ee09fa1021cb59c7f4f4d000b027febc967d/extensions/typescript-language-features/node_modules)
Info 20   [01:39:51.074] Loading @vsintellicode/typescript-intellicode-plugin from /home/ssalb/.vscode-server-insiders/extensions/visualstudioexptteam.vscodeintellicode-1.2.14 (resolved to /home/ssalb/.vscode-server-insiders/extensions/visualstudioexptteam.vscodeintellicode-1.2.14/node_modules)
Info 21   [01:39:51.078] IntelliCode plugin: starting configuration: {"name":"@vsintellicode/typescript-intellicode-plugin","global":true}
Info 22   [01:39:51.078] Plugin validation succeeded
Info 23   [01:39:51.090] Starting updateGraphWorker: Project: /home/ssalb/redo/pkgs/statelessly-2/tsconfig.json
Info 24   [01:39:52.044] Finishing updateGraphWorker: Project: /home/ssalb/redo/pkgs/statelessly-2/tsconfig.json Version: 1 structureChanged: true structureIsReused:: Not Elapsed: 954.0761249959469ms
Info 25   [01:39:52.044] Project '/home/ssalb/redo/pkgs/statelessly-2/tsconfig.json' (Configured)
Info 26   [01:39:52.044] 	Files (366)

Info 27   [01:39:52.044] -----------------------------------------------
Info 28   [01:39:52.058] Starting updateGraphWorker: Project: /dev/null/autoImportProviderProject1*
Info 29   [01:39:52.121] Finishing updateGraphWorker: Project: /dev/null/autoImportProviderProject1* Version: 1 structureChanged: true structureIsReused:: Not Elapsed: 63.31880500167608ms
Info 30   [01:39:52.121] Project '/dev/null/autoImportProviderProject1*' (AutoImportProvider)
Info 31   [01:39:52.121] 	Files (24)

Info 32   [01:39:52.121] -----------------------------------------------
Info 33   [01:39:52.125] Search path: /home/ssalb/redo/pkgs/statelessly-2/src
Info 34   [01:39:52.125] For info: /home/ssalb/redo/pkgs/statelessly-2/src/utils.ts :: Config file name: /home/ssalb/redo/pkgs/statelessly-2/tsconfig.json
Info 35   [01:39:52.125] Search path: /home/ssalb/redo/pkgs/statelessly-2/src
Info 36   [01:39:52.125] For info: /home/ssalb/redo/pkgs/statelessly-2/src/createTypes.ts :: Config file name: /home/ssalb/redo/pkgs/statelessly-2/tsconfig.json
Info 37   [01:39:52.125] Search path: /home/ssalb/redo/common/temp/node_modules/.pnpm/ts-toolbelt@9.5.10/node_modules/ts-toolbelt/out/Any
Info 38   [01:39:52.125] For info: /home/ssalb/redo/common/temp/node_modules/.pnpm/ts-toolbelt@9.5.10/node_modules/ts-toolbelt/out/Any/_api.d.ts :: No config files found.
Info 39   [01:39:52.125] Search path: /home/ssalb/redo/common/temp/node_modules/.pnpm/ts-toolbelt@9.5.10/node_modules/ts-toolbelt/out/Any
Info 40   [01:39:52.125] For info: /home/ssalb/redo/common/temp/node_modules/.pnpm/ts-toolbelt@9.5.10/node_modules/ts-toolbelt/out/Any/Compute.d.ts :: No config files found.
Info 41   [01:39:52.125] Search path: /home/ssalb/redo/pkgs/statelessly-2/src
Info 42   [01:39:52.125] For info: /home/ssalb/redo/pkgs/statelessly-2/src/index.ts :: Config file name: /home/ssalb/redo/pkgs/statelessly-2/tsconfig.json
Info 43   [01:39:52.128] received configuration command: {"modelPath":"/home/ssalb/.vscode-server-insiders/extensions/visualstudioexptteam.vscodeintellicode-1.2.14/cache/1A3F919CD5B7725108B03C349630A1C82B03_4A84987F2428442A9EC84563BB2BC063"}
Info 44   [01:39:52.146] TypeDef inferred as string
Info 45   [01:39:52.146] Context:  UpfilterTypes<Fields[K]>
Info 46   [01:39:52.146] TypeDef inferred as string
Info 47   [01:39:52.146] Context:  UpfilterTypes<Fields[K]>
Info 48   [01:39:52.155] TypeDef inferred as string
Info 49   [01:39:52.155] Context: 
            UpfilterTypes<Config[ModelPath]>
Info 50   [01:39:52.158] OptionalType inferred as string
Info 51   [01:39:52.158] Context:  ValidatedPropDef<keyof TypeSet & string, TypeDef>
Info 52   [01:39:52.158] OptionalType inferred as string
Info 53   [01:39:52.158] Context:  ValidatedPropDef<keyof TypeSet & string, TypeDef>
Info 54   [01:39:52.158] OptionalType inferred as string
Info 55   [01:39:52.158] Context:  ValidatedPropDef<keyof TypeSet & string, TypeDef>
Info 56   [01:39:52.160] V inferred as unknown
Info 57   [01:39:52.160] Context:  ModelConfigOptions<T, Config, IsTyped, InDefinition, Seen, TypeSet>
Info 58   [01:39:52.160] V inferred as unknown
Info 59   [01:39:52.160] Context:  ModelConfigOptions<T, Config, IsTyped, InDefinition, Seen, TypeSet>
Info 60   [01:39:52.160] V inferred as unknown
Info 61   [01:39:52.161] Context:  ModelConfigOptions<T, Config, IsTyped, InDefinition, Seen, TypeSet>
Info 62   [01:39:52.162] V inferred as unknown
Info 63   [01:39:52.162] Context:  Unlisted<T>
Info 64   [01:39:52.172] TypeDef inferred as string
Info 65   [01:39:52.172] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 66   [01:39:52.173] TypeDef inferred as string
Info 67   [01:39:52.173] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 68   [01:39:52.173] TypeDef inferred as string
Info 69   [01:39:52.173] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 70   [01:39:52.173] TypeDef inferred as string
Info 71   [01:39:52.173] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 72   [01:39:52.173] TypeDef inferred as string
Info 73   [01:39:52.173] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 74   [01:39:52.175] OptionalType inferred as string
Info 75   [01:39:52.175] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 76   [01:39:52.176] V inferred as unknown
Info 77   [01:39:52.176] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 78   [01:39:52.176] TypeDef inferred as string
Info 79   [01:39:52.176] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 80   [01:39:52.176] TypeDef inferred as string
Info 81   [01:39:52.176] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 82   [01:39:52.177] TypeDef inferred as string
Info 83   [01:39:52.177] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 84   [01:39:52.178] OptionalType inferred as never
Info 85   [01:39:52.178] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 86   [01:39:52.178] Group inferred as string
Info 87   [01:39:52.178] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 88   [01:39:52.178] Group inferred as string
Info 89   [01:39:52.178] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 90   [01:39:52.178] Group inferred as never
Info 91   [01:39:52.178] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 92   [01:39:52.178] ListItem inferred as string
Info 93   [01:39:52.178] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 94   [01:39:52.178] ListItem inferred as never
Info 95   [01:39:52.178] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 96   [01:39:52.179] First inferred as string
Info 97   [01:39:52.179] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 98   [01:39:52.179] Second inferred as string
Info 99   [01:39:52.179] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 100  [01:39:52.179] First inferred as never
Info 101  [01:39:52.179] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 102  [01:39:52.179] Second inferred as never
Info 103  [01:39:52.179] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 104  [01:39:52.180] TypeDef inferred as string
Info 105  [01:39:52.180] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 106  [01:39:52.180] TypeDef inferred as string
Info 107  [01:39:52.180] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 108  [01:39:52.218] TypeDef inferred as string
Info 109  [01:39:52.218] Context:  {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    }
Info 110  [01:39:52.218] V inferred as unknown
Info 111  [01:39:52.218] Context:  {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    }
Info 112  [01:39:52.218] TypeDef inferred as string
Info 113  [01:39:52.218] Context:  {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    }
Info 114  [01:39:52.225] TypeDef inferred as string
Info 115  [01:39:52.225] Context:  {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
Info 116  [01:39:52.225] V inferred as unknown
Info 117  [01:39:52.225] Context:  {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
Info 118  [01:39:52.225] TypeDef inferred as string
Info 119  [01:39:52.225] Context:  {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
Info 120  [01:39:52.238] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 121  [01:39:52.238] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 122  [01:39:52.238] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 123  [01:39:52.238] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 124  [01:39:52.239] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 125  [01:39:52.239] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 126  [01:39:52.239] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 127  [01:39:52.239] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 128  [01:39:52.239] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 129  [01:39:52.239] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 130  [01:39:52.240] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 131  [01:39:52.240] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 132  [01:39:52.240] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 133  [01:39:52.240] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 134  [01:39:52.240] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 135  [01:39:52.240] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 136  [01:39:52.243] TypeDef inferred as string
Info 137  [01:39:52.243] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 138  [01:39:52.243] TypeDef inferred as string
Info 139  [01:39:52.243] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 140  [01:39:52.244] TypeDef inferred as string
Info 141  [01:39:52.244] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 142  [01:39:52.244] TypeDef inferred as string
Info 143  [01:39:52.244] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 144  [01:39:52.244] TypeDef inferred as string
Info 145  [01:39:52.244] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 146  [01:39:52.244] Fields inferred as object
Info 147  [01:39:52.244] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 148  [01:39:52.244] Fields inferred as object
Info 149  [01:39:52.244] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 150  [01:39:52.245] Fields inferred as { name: { type: "string"; onChange: () => string; }; }
Info 151  [01:39:52.245] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 152  [01:39:52.245] Fields inferred as { name: { type: "string"; onChange: () => string; }; }
Info 153  [01:39:52.245] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 154  [01:39:52.245] OptionalType inferred as string
Info 155  [01:39:52.245] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 156  [01:39:52.245] OptionalType inferred as string
Info 157  [01:39:52.245] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 158  [01:39:52.245] OptionalType inferred as never
Info 159  [01:39:52.245] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 160  [01:39:52.246] Group inferred as string
Info 161  [01:39:52.246] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 162  [01:39:52.246] Group inferred as string
Info 163  [01:39:52.246] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 164  [01:39:52.246] Group inferred as never
Info 165  [01:39:52.246] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 166  [01:39:52.246] ListItem inferred as string
Info 167  [01:39:52.246] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 168  [01:39:52.246] ListItem inferred as never
Info 169  [01:39:52.246] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 170  [01:39:52.246] First inferred as string
Info 171  [01:39:52.246] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 172  [01:39:52.246] Second inferred as string
Info 173  [01:39:52.246] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 174  [01:39:52.247] First inferred as never
Info 175  [01:39:52.247] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 176  [01:39:52.247] Second inferred as never
Info 177  [01:39:52.247] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 178  [01:39:52.248] TypeDef inferred as string
Info 179  [01:39:52.248] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 180  [01:39:52.248] TypeDef inferred as string
Info 181  [01:39:52.248] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 182  [01:39:52.248] TypeDef inferred as string
Info 183  [01:39:52.248] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 184  [01:39:52.248] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 185  [01:39:52.249] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 186  [01:39:52.249] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 187  [01:39:52.249] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 188  [01:39:52.250] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 189  [01:39:52.250] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 190  [01:39:52.250] TypeDef inferred as string
Info 191  [01:39:52.250] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 192  [01:39:52.251] TypeDef inferred as "string"
Info 193  [01:39:52.251] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 194  [01:39:52.251] TypeDef inferred as "string"
Info 195  [01:39:52.251] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 196  [01:39:52.251] TypeDef inferred as "string"
Info 197  [01:39:52.251] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 198  [01:39:52.252] OptionalType inferred as string
Info 199  [01:39:52.252] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 200  [01:39:52.253] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 201  [01:39:52.253] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 202  [01:39:52.253] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 203  [01:39:52.253] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 204  [01:39:52.253] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 205  [01:39:52.253] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 206  [01:39:52.254] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 207  [01:39:52.254] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 208  [01:39:52.254] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 209  [01:39:52.254] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 210  [01:39:52.254] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 211  [01:39:52.254] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 212  [01:39:52.254] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 213  [01:39:52.254] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 214  [01:39:52.255] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 215  [01:39:52.255] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 216  [01:39:52.255] OptionalType inferred as never
Info 217  [01:39:52.255] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 218  [01:39:52.255] Group inferred as never
Info 219  [01:39:52.255] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 220  [01:39:52.256] ListItem inferred as never
Info 221  [01:39:52.256] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 222  [01:39:52.256] First inferred as never
Info 223  [01:39:52.256] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 224  [01:39:52.256] Second inferred as never
Info 225  [01:39:52.256] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 226  [01:39:52.256] TypeDef inferred as string
Info 227  [01:39:52.256] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 228  [01:39:52.257] V inferred as unknown
Info 229  [01:39:52.257] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 230  [01:39:52.260] TypeDef inferred as string
Info 231  [01:39:52.260] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 232  [01:39:52.260] TypeDef inferred as "string"
Info 233  [01:39:52.260] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 234  [01:39:52.260] TypeDef inferred as "string"
Info 235  [01:39:52.260] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 236  [01:39:52.260] TypeDef inferred as "string"
Info 237  [01:39:52.260] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 238  [01:39:52.261] OptionalType inferred as never
Info 239  [01:39:52.261] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 240  [01:39:52.261] Group inferred as never
Info 241  [01:39:52.261] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 242  [01:39:52.262] ListItem inferred as never
Info 243  [01:39:52.262] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 244  [01:39:52.262] First inferred as never
Info 245  [01:39:52.262] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 246  [01:39:52.263] Second inferred as never
Info 247  [01:39:52.263] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 248  [01:39:52.263] TypeDef inferred as string
Info 249  [01:39:52.263] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 250  [01:39:52.264] V inferred as unknown
Info 251  [01:39:52.264] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 252  [01:39:52.269] V inferred as unknown
Info 253  [01:39:52.269] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 254  [01:39:52.270] OptionalType inferred as never
Info 255  [01:39:52.270] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 256  [01:39:52.270] Group inferred as never
Info 257  [01:39:52.270] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 258  [01:39:52.270] ListItem inferred as never
Info 259  [01:39:52.270] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 260  [01:39:52.270] First inferred as never
Info 261  [01:39:52.270] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 262  [01:39:52.270] Second inferred as never
Info 263  [01:39:52.270] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 264  [01:39:52.271] TypeDef inferred as string
Info 265  [01:39:52.271] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 266  [01:39:52.271] V inferred as unknown
Info 267  [01:39:52.271] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 268  [01:39:52.272] OptionalType inferred as never
Info 269  [01:39:52.272] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 270  [01:39:52.272] Group inferred as never
Info 271  [01:39:52.272] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 272  [01:39:52.272] ListItem inferred as never
Info 273  [01:39:52.272] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 274  [01:39:52.272] First inferred as never
Info 275  [01:39:52.272] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 276  [01:39:52.272] Second inferred as never
Info 277  [01:39:52.272] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 278  [01:39:52.274] OptionalType inferred as string
Info 279  [01:39:52.274] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 280  [01:39:52.274] OptionalType inferred as never
Info 281  [01:39:52.274] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 282  [01:39:52.274] Group inferred as never
Info 283  [01:39:52.274] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 284  [01:39:52.274] ListItem inferred as never
Info 285  [01:39:52.274] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 286  [01:39:52.274] First inferred as never
Info 287  [01:39:52.274] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 288  [01:39:52.274] Second inferred as never
Info 289  [01:39:52.274] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 290  [01:39:52.277] OptionalType inferred as never
Info 291  [01:39:52.277] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 292  [01:39:52.277] Group inferred as never
Info 293  [01:39:52.277] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 294  [01:39:52.277] ListItem inferred as never
Info 295  [01:39:52.277] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 296  [01:39:52.277] First inferred as never
Info 297  [01:39:52.277] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 298  [01:39:52.277] Second inferred as never
Info 299  [01:39:52.277] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 300  [01:39:52.277] TypeDef inferred as string
Info 301  [01:39:52.277] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 302  [01:39:52.277] TypeDef inferred as string
Info 303  [01:39:52.277] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 304  [01:39:52.277] TypeDef inferred as string
Info 305  [01:39:52.277] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 306  [01:39:52.278] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 307  [01:39:52.278] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 308  [01:39:52.278] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 309  [01:39:52.278] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 310  [01:39:52.278] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 311  [01:39:52.278] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 312  [01:39:52.280] OptionalType inferred as never
Info 313  [01:39:52.280] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 314  [01:39:52.280] Group inferred as never
Info 315  [01:39:52.280] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 316  [01:39:52.280] ListItem inferred as never
Info 317  [01:39:52.280] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 318  [01:39:52.280] First inferred as never
Info 319  [01:39:52.280] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 320  [01:39:52.281] Second inferred as never
Info 321  [01:39:52.281] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 322  [01:39:52.281] TypeDef inferred as string
Info 323  [01:39:52.283] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 324  [01:39:52.286] TypeDef inferred as string
Info 325  [01:39:52.286] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 326  [01:39:52.286] V inferred as unknown
Info 327  [01:39:52.286] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 328  [01:39:52.289] V inferred as unknown
Info 329  [01:39:52.289] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 330  [01:39:52.290] OptionalType inferred as never
Info 331  [01:39:52.290] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 332  [01:39:52.290] Group inferred as never
Info 333  [01:39:52.290] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 334  [01:39:52.290] ListItem inferred as never
Info 335  [01:39:52.290] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 336  [01:39:52.290] First inferred as never
Info 337  [01:39:52.290] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 338  [01:39:52.290] Second inferred as never
Info 339  [01:39:52.290] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 340  [01:39:52.291] TypeDef inferred as string
Info 341  [01:39:52.291] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 342  [01:39:52.304] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 343  [01:39:52.304] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 344  [01:39:52.305] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 345  [01:39:52.305] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 346  [01:39:52.305] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 347  [01:39:52.305] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 348  [01:39:52.305] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 349  [01:39:52.305] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 350  [01:39:52.306] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 351  [01:39:52.306] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 352  [01:39:52.306] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 353  [01:39:52.306] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 354  [01:39:52.306] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 355  [01:39:52.306] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 356  [01:39:52.307] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 357  [01:39:52.307] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 358  [01:39:52.307] TypeDef inferred as string
Info 359  [01:39:52.307] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 360  [01:39:52.307] TypeDef inferred as string
Info 361  [01:39:52.307] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 362  [01:39:52.307] TypeDef inferred as string
Info 363  [01:39:52.307] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 364  [01:39:52.307] Fields inferred as { name: { type: "string"; onChange: () => string; }; }
Info 365  [01:39:52.307] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 366  [01:39:52.308] Fields inferred as { name: { type: "string"; onChange: () => string; }; }
Info 367  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 368  [01:39:52.308] OptionalType inferred as never
Info 369  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 370  [01:39:52.308] Group inferred as never
Info 371  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 372  [01:39:52.308] ListItem inferred as never
Info 373  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 374  [01:39:52.308] First inferred as never
Info 375  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 376  [01:39:52.308] Second inferred as never
Info 377  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 378  [01:39:52.308] TypeDef inferred as string
Info 379  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 380  [01:39:52.308] TypeDef inferred as string
Info 381  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 382  [01:39:52.308] TypeDef inferred as string
Info 383  [01:39:52.308] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 384  [01:39:52.309] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 385  [01:39:52.309] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 386  [01:39:52.309] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 387  [01:39:52.309] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 388  [01:39:52.309] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 389  [01:39:52.309] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 390  [01:39:52.309] TypeDef inferred as string
Info 391  [01:39:52.309] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 392  [01:39:52.310] TypeDef inferred as "string"
Info 393  [01:39:52.310] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 394  [01:39:52.310] TypeDef inferred as "string"
Info 395  [01:39:52.310] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 396  [01:39:52.310] TypeDef inferred as "string"
Info 397  [01:39:52.310] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 398  [01:39:52.312] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 399  [01:39:52.312] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 400  [01:39:52.312] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 401  [01:39:52.312] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 402  [01:39:52.313] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 403  [01:39:52.313] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 404  [01:39:52.313] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 405  [01:39:52.313] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 406  [01:39:52.313] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 407  [01:39:52.313] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 408  [01:39:52.313] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 409  [01:39:52.314] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 410  [01:39:52.314] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 411  [01:39:52.314] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 412  [01:39:52.314] Config inferred as { users: { defines: "user"; fields: { name: { type: "string"; onChange: () => string; }; }; }; groups: { defines: "group"; fields: { name: { type: "string"; onChange: unknown; }; }; }; }
Info 413  [01:39:52.314] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 414  [01:39:52.315] OptionalType inferred as never
Info 415  [01:39:52.315] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 416  [01:39:52.315] Group inferred as never
Info 417  [01:39:52.315] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 418  [01:39:52.315] ListItem inferred as never
Info 419  [01:39:52.315] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 420  [01:39:52.315] First inferred as never
Info 421  [01:39:52.315] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 422  [01:39:52.315] Second inferred as never
Info 423  [01:39:52.315] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 424  [01:39:52.315] TypeDef inferred as string
Info 425  [01:39:52.315] Context:  createStore({
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
})
Info 426  [01:39:52.319] TypeDef inferred as string
Info 427  [01:39:52.319] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 428  [01:39:52.319] TypeDef inferred as "string"
Info 429  [01:39:52.319] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 430  [01:39:52.319] TypeDef inferred as "string"
Info 431  [01:39:52.319] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 432  [01:39:52.319] TypeDef inferred as "string"
Info 433  [01:39:52.320] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 434  [01:39:52.320] OptionalType inferred as never
Info 435  [01:39:52.320] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 436  [01:39:52.320] Group inferred as never
Info 437  [01:39:52.320] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 438  [01:39:52.320] ListItem inferred as never
Info 439  [01:39:52.320] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 440  [01:39:52.320] First inferred as never
Info 441  [01:39:52.320] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 442  [01:39:52.321] Second inferred as never
Info 443  [01:39:52.321] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 444  [01:39:52.321] TypeDef inferred as string
Info 445  [01:39:52.321] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 446  [01:39:52.321] V inferred as unknown
Info 447  [01:39:52.321] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 448  [01:39:52.324] V inferred as unknown
Info 449  [01:39:52.324] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 450  [01:39:52.324] OptionalType inferred as never
Info 451  [01:39:52.324] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 452  [01:39:52.324] Group inferred as never
Info 453  [01:39:52.324] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 454  [01:39:52.324] ListItem inferred as never
Info 455  [01:39:52.324] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 456  [01:39:52.324] First inferred as never
Info 457  [01:39:52.324] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 458  [01:39:52.325] Second inferred as never
Info 459  [01:39:52.325] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 460  [01:39:52.325] TypeDef inferred as string
Info 461  [01:39:52.325] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 462  [01:39:52.326] OptionalType inferred as never
Info 463  [01:39:52.326] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 464  [01:39:52.326] Group inferred as never
Info 465  [01:39:52.326] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 466  [01:39:52.326] ListItem inferred as never
Info 467  [01:39:52.326] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 468  [01:39:52.326] First inferred as never
Info 469  [01:39:52.326] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 470  [01:39:52.326] Second inferred as never
Info 471  [01:39:52.326] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 472  [01:39:52.328] OptionalType inferred as never
Info 473  [01:39:52.328] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 474  [01:39:52.328] Group inferred as never
Info 475  [01:39:52.328] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 476  [01:39:52.328] ListItem inferred as never
Info 477  [01:39:52.328] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 478  [01:39:52.328] First inferred as never
Info 479  [01:39:52.328] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 480  [01:39:52.328] Second inferred as never
Info 481  [01:39:52.328] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 482  [01:39:52.328] TypeDef inferred as string
Info 483  [01:39:52.328] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 484  [01:39:52.329] TypeDef inferred as string
Info 485  [01:39:52.329] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 486  [01:39:52.329] TypeDef inferred as string
Info 487  [01:39:52.329] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 488  [01:39:52.329] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 489  [01:39:52.329] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 490  [01:39:52.329] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 491  [01:39:52.329] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 492  [01:39:52.330] Fields inferred as { name: { type: "string"; onChange: unknown; }; }
Info 493  [01:39:52.330] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 494  [01:39:52.331] OptionalType inferred as never
Info 495  [01:39:52.331] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 496  [01:39:52.331] Group inferred as never
Info 497  [01:39:52.331] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 498  [01:39:52.331] ListItem inferred as never
Info 499  [01:39:52.331] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 500  [01:39:52.331] First inferred as never
Info 501  [01:39:52.331] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 502  [01:39:52.331] Second inferred as never
Info 503  [01:39:52.331] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 504  [01:39:52.332] TypeDef inferred as string
Info 505  [01:39:52.332] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 506  [01:39:52.334] TypeDef inferred as string
Info 507  [01:39:52.334] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 508  [01:39:52.334] V inferred as unknown
Info 509  [01:39:52.334] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 510  [01:39:52.336] V inferred as unknown
Info 511  [01:39:52.336] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 512  [01:39:52.337] OptionalType inferred as never
Info 513  [01:39:52.337] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 514  [01:39:52.337] Group inferred as never
Info 515  [01:39:52.337] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 516  [01:39:52.337] ListItem inferred as never
Info 517  [01:39:52.337] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 518  [01:39:52.337] First inferred as never
Info 519  [01:39:52.337] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 520  [01:39:52.337] Second inferred as never
Info 521  [01:39:52.337] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 522  [01:39:52.337] TypeDef inferred as string
Info 523  [01:39:52.337] Context: {
    users: {
        defines: "user",
        fields: {
            name: {
                type: "string",
                onChange: () => ":-)"
            }
        }
    },
    groups: {
        defines: "group",
        fields: {
            name: {
                type: "string",
                onChange: (_) => ""
            }
        }
    }
}
Info 524  [01:39:52.369] I inferred as unknown
Info 525  [01:39:52.369] Context:  ToolbeltUnion.Last<U>
Info 526  [01:39:52.369] I inferred as unknown
Info 527  [01:39:52.369] Context:  ToolbeltUnion.Last<U>
Info 528  [01:39:52.369] P inferred as unknown
Info 529  [01:39:52.369] Context:  ToolbeltUnion.Last<U>
Info 530  [01:39:52.369] I inferred as unknown
Info 531  [01:39:52.369] Context:  ToolbeltUnion.Last<U>
Info 532  [01:39:52.369] P inferred as unknown
Info 533  [01:39:52.369] Context:  ToolbeltUnion.Last<U>
Info 534  [01:39:52.371] I inferred as unknown
Info 535  [01:39:52.371] Context:  ListPossibleTypesRecurse<
        Exclude<U, LastU>,
        ToolbeltList.Prepend<LN, LastU>
    >
Info 536  [01:39:52.371] P inferred as unknown
Info 537  [01:39:52.371] Context:  ListPossibleTypesRecurse<
        Exclude<U, LastU>,
        ToolbeltList.Prepend<LN, LastU>
    >
Info 538  [01:39:52.371] I inferred as unknown
Info 539  [01:39:52.372] Context:  ListPossibleTypesRecurse<U>
Info 540  [01:39:52.372] P inferred as unknown
Info 541  [01:39:52.372] Context:  ListPossibleTypesRecurse<U>
Info 542  [01:39:52.372] X inferred as unknown
Info 543  [01:39:52.372] Context: 
    ListPossibleTypes<U>
Info 544  [01:39:52.372] I inferred as unknown
Info 545  [01:39:52.372] Context: 
    ListPossibleTypes<U>
Info 546  [01:39:52.372] P inferred as unknown
Info 547  [01:39:52.372] Context: 
    ListPossibleTypes<U>
Info 548  [01:39:52.372] X inferred as unknown
Info 549  [01:39:52.372] Context: 
    ListPossibleTypes<U>
Info 550  [01:39:52.372] X inferred as unknown
Info 551  [01:39:52.372] Context:  Join<
    ListPossibleTypes<U>,
    ", "
>
Info 552  [01:39:52.373] I inferred as unknown
Info 553  [01:39:52.373] Context:  StringifyPossibleTypes<
    O extends any[] ? keyof O & number : keyof O & string
>
Info 554  [01:39:52.373] P inferred as unknown
Info 555  [01:39:52.373] Context:  StringifyPossibleTypes<
    O extends any[] ? keyof O & number : keyof O & string
>
Info 556  [01:39:52.373] X inferred as unknown
Info 557  [01:39:52.373] Context:  StringifyPossibleTypes<
    O extends any[] ? keyof O & number : keyof O & string
>
Info 558  [01:39:52.376] Args inferred as unknown[]
Info 559  [01:39:52.376] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 560  [01:39:52.376] Return inferred as unknown
Info 561  [01:39:52.376] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 562  [01:39:52.377] Args inferred as [_: unknown]
Info 563  [01:39:52.377] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 564  [01:39:52.377] Return inferred as {}
Info 565  [01:39:52.377] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 566  [01:39:52.378] ExpectedArgs inferred as unknown[]
Info 567  [01:39:52.378] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 568  [01:39:52.378] ExpectedReturn inferred as unknown
Info 569  [01:39:52.378] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 570  [01:39:52.378] Args inferred as [_: unknown]
Info 571  [01:39:52.378] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 572  [01:39:52.378] Return inferred as {}
Info 573  [01:39:52.378] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 574  [01:39:52.378] ExpectedArgs inferred as []
Info 575  [01:39:52.378] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 576  [01:39:52.378] ExpectedReturn inferred as {}
Info 577  [01:39:52.378] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 578  [01:39:52.379] ExpectedArgs inferred as []
Info 579  [01:39:52.379] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 580  [01:39:52.379] ExpectedReturn inferred as {}
Info 581  [01:39:52.379] Context:  ExactFunction<(_: unknown) => {}, () => {}>
Info 582  [01:39:52.379] Args inferred as unknown[]
Info 583  [01:39:52.379] Context:  InferFunction<(_: unknown) => {}>
Info 584  [01:39:52.379] Return inferred as unknown
Info 585  [01:39:52.379] Context:  InferFunction<(_: unknown) => {}>
Info 586  [01:39:52.379] Args inferred as [_: unknown]
Info 587  [01:39:52.379] Context:  InferFunction<(_: unknown) => {}>
Info 588  [01:39:52.379] Return inferred as {}
Info 589  [01:39:52.379] Context:  InferFunction<(_: unknown) => {}>
Info 590  [01:39:52.380] Args inferred as [_: unknown]
Info 591  [01:39:52.380] Context:  InferFunction<(_: unknown) => {}>
Info 592  [01:39:52.380] Return inferred as {}
Info 593  [01:39:52.380] Context:  InferFunction<(_: unknown) => {}>
Info 594  [01:39:52.380] Args inferred as []
Info 595  [01:39:52.380] Context:  InferFunction<() => {}>
Info 596  [01:39:52.380] Return inferred as {}
Info 597  [01:39:52.380] Context:  InferFunction<() => {}>
Info 598  [01:39:52.380] Args inferred as []
Info 599  [01:39:52.380] Context:  InferFunction<() => {}>
Info 600  [01:39:52.380] Return inferred as {}
Info 601  [01:39:52.380] Context:  InferFunction<() => {}>
Info 602  [01:39:52.383] B inferred as unknown
Info 603  [01:39:52.383] Context:  (a: { a: number }) => {}
Info 604  [01:39:52.430] Group inferred as string
Info 605  [01:39:52.430] Context: ValidatedPropDefRecurse<DefinedTypeName, Group>
Info 606  [01:39:52.430] ListItem inferred as string
Info 607  [01:39:52.430] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 608  [01:39:52.431] Group inferred as never
Info 609  [01:39:52.431] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 610  [01:39:52.431] ListItem inferred as never
Info 611  [01:39:52.431] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 612  [01:39:52.431] First inferred as never
Info 613  [01:39:52.431] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 614  [01:39:52.431] Second inferred as never
Info 615  [01:39:52.431] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 616  [01:39:52.432] Group inferred as string
Info 617  [01:39:52.432] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 618  [01:39:52.432] Group inferred as string
Info 619  [01:39:52.432] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 620  [01:39:52.432] First inferred as string
Info 621  [01:39:52.432] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 622  [01:39:52.432] Second inferred as string
Info 623  [01:39:52.432] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 624  [01:39:52.432] ListItem inferred as never
Info 625  [01:39:52.432] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 626  [01:39:52.432] First inferred as never
Info 627  [01:39:52.432] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 628  [01:39:52.432] Second inferred as never
Info 629  [01:39:52.432] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 630  [01:39:52.433] ListItem inferred as string
Info 631  [01:39:52.433] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 632  [01:39:52.433] Group inferred as string
Info 633  [01:39:52.433] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 634  [01:39:52.433] Group inferred as string
Info 635  [01:39:52.433] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 636  [01:39:52.433] First inferred as never
Info 637  [01:39:52.433] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 638  [01:39:52.433] Second inferred as never
Info 639  [01:39:52.433] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 640  [01:39:52.433] First inferred as string
Info 641  [01:39:52.433] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 642  [01:39:52.433] Second inferred as string
Info 643  [01:39:52.433] Context:  `(${ValidatedPropDefRecurse<DefinedTypeName, Group>})`
Info 644  [01:39:52.436] ListItem inferred as string
Info 645  [01:39:52.436] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, ListItem>}[]`
Info 646  [01:39:52.436] Group inferred as string
Info 647  [01:39:52.436] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, ListItem>}[]`
Info 648  [01:39:52.436] ListItem inferred as string
Info 649  [01:39:52.436] Context:  `${ValidatedPropDefRecurse<
          DefinedTypeName,
          First
      >} | ${ValidatedPropDefRecurse<DefinedTypeName, Second>}`
Info 650  [01:39:52.436] Group inferred as string
Info 651  [01:39:52.436] Context:  `${ValidatedPropDefRecurse<
          DefinedTypeName,
          First
      >} | ${ValidatedPropDefRecurse<DefinedTypeName, Second>}`
Info 652  [01:39:52.436] ListItem inferred as string
Info 653  [01:39:52.436] Context:  `${ValidatedPropDefRecurse<
          DefinedTypeName,
          First
      >} | ${ValidatedPropDefRecurse<DefinedTypeName, Second>}`
Info 654  [01:39:52.436] Group inferred as string
Info 655  [01:39:52.436] Context:  `${ValidatedPropDefRecurse<
          DefinedTypeName,
          First
      >} | ${ValidatedPropDefRecurse<DefinedTypeName, Second>}`
Info 656  [01:39:52.437] Group inferred as string
Info 657  [01:39:52.437] Context: ValidatedPropDefRecurse<DefinedTypeName, OptionalType>
Info 658  [01:39:52.437] Group inferred as string
Info 659  [01:39:52.437] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 660  [01:39:52.437] ListItem inferred as string
Info 661  [01:39:52.437] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 662  [01:39:52.437] Group inferred as never
Info 663  [01:39:52.437] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 664  [01:39:52.437] ListItem inferred as never
Info 665  [01:39:52.437] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 666  [01:39:52.437] First inferred as never
Info 667  [01:39:52.437] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 668  [01:39:52.437] Second inferred as never
Info 669  [01:39:52.437] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 670  [01:39:52.438] Group inferred as string
Info 671  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 672  [01:39:52.438] Group inferred as string
Info 673  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 674  [01:39:52.438] First inferred as string
Info 675  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 676  [01:39:52.438] Second inferred as string
Info 677  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 678  [01:39:52.438] ListItem inferred as never
Info 679  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 680  [01:39:52.438] First inferred as never
Info 681  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 682  [01:39:52.438] Second inferred as never
Info 683  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 684  [01:39:52.438] ListItem inferred as string
Info 685  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 686  [01:39:52.438] Group inferred as string
Info 687  [01:39:52.438] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 688  [01:39:52.439] Group inferred as string
Info 689  [01:39:52.439] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 690  [01:39:52.439] First inferred as never
Info 691  [01:39:52.439] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 692  [01:39:52.439] Second inferred as never
Info 693  [01:39:52.439] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 694  [01:39:52.439] First inferred as string
Info 695  [01:39:52.439] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 696  [01:39:52.439] Second inferred as string
Info 697  [01:39:52.439] Context:  `${ValidatedPropDefRecurse<DefinedTypeName, OptionalType>}?`
Info 698  [01:39:52.441] OptionalType inferred as string
Info 699  [01:39:52.441] Context:  ValidatedPropDef<
              keyof TypeSet & string,
              Definition[PropName] & string
          >
Info 700  [01:39:52.442] Group inferred as string
Info 701  [01:39:52.442] Context:  ParseTypeStringRecurse<Definitions, OptionalType>
Info 702  [01:39:52.442] Group inferred as string
Info 703  [01:39:52.442] Context:  ParseTypeStringRecurse<Definitions, Group>
Info 704  [01:39:52.442] Group inferred as string
Info 705  [01:39:52.442] Context:  ParseTypeStringRecurse<Definitions, ListItem>
Info 706  [01:39:52.442] Group inferred as string
Info 707  [01:39:52.442] Context:  ParseTypeStringRecurse<Definitions, First>
Info 708  [01:39:52.443] Group inferred as string
Info 709  [01:39:52.443] Context:  ParseTypeStringRecurse<Definitions, Second>
Info 710  [01:39:52.456] OptionalType inferred as string
Info 711  [01:39:52.456] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 712  [01:39:52.458] Group inferred as string
Info 713  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 714  [01:39:52.458] Group inferred as string
Info 715  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 716  [01:39:52.458] OptionalType inferred as string
Info 717  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 718  [01:39:52.458] Group inferred as never
Info 719  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 720  [01:39:52.458] ListItem inferred as never
Info 721  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 722  [01:39:52.458] First inferred as never
Info 723  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 724  [01:39:52.458] Second inferred as never
Info 725  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 726  [01:39:52.458] Group inferred as string
Info 727  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 728  [01:39:52.458] ListItem inferred as string
Info 729  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 730  [01:39:52.458] Group inferred as string
Info 731  [01:39:52.458] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 732  [01:39:52.459] Group inferred as string
Info 733  [01:39:52.459] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 734  [01:39:52.459] First inferred as string
Info 735  [01:39:52.459] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 736  [01:39:52.459] Second inferred as string
Info 737  [01:39:52.459] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 738  [01:39:52.459] ListItem inferred as string
Info 739  [01:39:52.459] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 740  [01:39:52.459] Group inferred as string
Info 741  [01:39:52.459] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 742  [01:39:52.459] Group inferred as string
Info 743  [01:39:52.459] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 744  [01:39:52.459] First inferred as string
Info 745  [01:39:52.459] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 746  [01:39:52.459] Second inferred as string
Info 747  [01:39:52.459] Context:  {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    }
Info 748  [01:39:52.469] OptionalType inferred as string
Info 749  [01:39:52.469] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 750  [01:39:52.471] Group inferred as string
Info 751  [01:39:52.471] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 752  [01:39:52.472] OptionalType inferred as string
Info 753  [01:39:52.472] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 754  [01:39:52.472] ListItem inferred as string
Info 755  [01:39:52.472] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 756  [01:39:52.472] Group inferred as string
Info 757  [01:39:52.472] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 758  [01:39:52.472] First inferred as string
Info 759  [01:39:52.472] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 760  [01:39:52.472] Second inferred as string
Info 761  [01:39:52.472] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 762  [01:39:52.472] ListItem inferred as string
Info 763  [01:39:52.472] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 764  [01:39:52.472] First inferred as string
Info 765  [01:39:52.472] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 766  [01:39:52.472] Second inferred as string
Info 767  [01:39:52.472] Context:  {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
Info 768  [01:39:52.478] Definitions inferred as { user: { name: "string"; bestFriend: "user"; friends: "user[]"; groups: "group[]"; nested: { another: "string"; user: "user[]"; }; }; group: { name: "string"; description: "string?"; members: "user[]"; owner: "user"; }; }
Info 769  [01:39:52.478] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 770  [01:39:52.479] Definitions inferred as { user: { name: "string"; bestFriend: "user"; friends: "user[]"; groups: "group[]"; nested: { another: "string"; user: "user[]"; }; }; group: { name: "string"; description: "string?"; members: "user[]"; owner: "user"; }; }
Info 771  [01:39:52.479] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 772  [01:39:52.479] Definitions inferred as { user: { name: "string"; bestFriend: "user"; friends: "user[]"; groups: "group[]"; nested: { another: "string"; user: "user[]"; }; }; group: { name: "string"; description: "string?"; members: "user[]"; owner: "user"; }; }
Info 773  [01:39:52.479] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 774  [01:39:52.479] Definitions inferred as { user: { name: "string"; bestFriend: "user"; friends: "user[]"; groups: "group[]"; nested: { another: "string"; user: "user[]"; }; }; group: { name: "string"; description: "string?"; members: "user[]"; owner: "user"; }; }
Info 775  [01:39:52.479] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 776  [01:39:52.480] OptionalType inferred as never
Info 777  [01:39:52.480] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 778  [01:39:52.480] Group inferred as never
Info 779  [01:39:52.480] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 780  [01:39:52.480] ListItem inferred as never
Info 781  [01:39:52.480] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 782  [01:39:52.481] First inferred as never
Info 783  [01:39:52.481] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 784  [01:39:52.481] Second inferred as never
Info 785  [01:39:52.481] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 786  [01:39:52.481] OptionalType inferred as never
Info 787  [01:39:52.481] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 788  [01:39:52.481] Group inferred as never
Info 789  [01:39:52.481] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 790  [01:39:52.483] ListItem inferred as "user"
Info 791  [01:39:52.484] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 792  [01:39:52.484] ListItem inferred as "user"
Info 793  [01:39:52.484] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 794  [01:39:52.485] OptionalType inferred as never
Info 795  [01:39:52.485] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 796  [01:39:52.485] Group inferred as never
Info 797  [01:39:52.485] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 798  [01:39:52.485] ListItem inferred as "group"
Info 799  [01:39:52.485] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 800  [01:39:52.485] ListItem inferred as "group"
Info 801  [01:39:52.485] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 802  [01:39:52.485] Group inferred as never
Info 803  [01:39:52.485] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 804  [01:39:52.485] ListItem inferred as never
Info 805  [01:39:52.485] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 806  [01:39:52.485] First inferred as never
Info 807  [01:39:52.485] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 808  [01:39:52.485] Second inferred as never
Info 809  [01:39:52.485] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 810  [01:39:52.490] OptionalType inferred as "string"
Info 811  [01:39:52.490] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 812  [01:39:52.490] OptionalType inferred as "string"
Info 813  [01:39:52.490] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
})
Info 814  [01:39:52.497] OptionalType inferred as never
Info 815  [01:39:52.497] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner
Info 816  [01:39:52.497] Group inferred as never
Info 817  [01:39:52.497] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner
Info 818  [01:39:52.497] ListItem inferred as never
Info 819  [01:39:52.497] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner
Info 820  [01:39:52.497] First inferred as never
Info 821  [01:39:52.497] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner
Info 822  [01:39:52.497] Second inferred as never
Info 823  [01:39:52.497] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner
Info 824  [01:39:52.498] OptionalType inferred as never
Info 825  [01:39:52.498] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner.nested.another
Info 826  [01:39:52.499] Group inferred as never
Info 827  [01:39:52.499] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner.nested.another
Info 828  [01:39:52.499] ListItem inferred as never
Info 829  [01:39:52.499] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner.nested.another
Info 830  [01:39:52.499] First inferred as never
Info 831  [01:39:52.499] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner.nested.another
Info 832  [01:39:52.499] Second inferred as never
Info 833  [01:39:52.499] Context: 

getTypes({
    user: {
        name: "string",
        bestFriend: "user",
        friends: "user[]",
        groups: "group[]",
        nested: {
            another: "string",
            user: "user[]"
        }
    },
    group: {
        name: "string",
        description: "string?",
        members: "user[]",
        owner: "user"
    }
}).group.owner.nested.another
