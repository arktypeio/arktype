{
    "tests/space.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 8,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => import(\"/home/ssalb/2re-po/pkgs/model/src/space\").Space<{ a: \"strig\"; }>"
            },
            "errors": "Type '\"strig\"' is not assignable to type '\"Error: Unable to determine the type of 'strig'.\"'.",
            "position": {
                "line": 10,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ c: boolean; }"
            },
            "errors": "",
            "position": {
                "line": 15,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => import(\"/home/ssalb/2re-po/pkgs/model/src/space\").Space<{ a: \"string\"; b: { c: \"uhoh\"; }; }>"
            },
            "errors": "Type '\"uhoh\"' is not assignable to type '\"Error: Unable to determine the type of 'uhoh'.\"'.",
            "position": {
                "line": 18,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 24,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => import(\"/home/ssalb/2re-po/pkgs/model/src/space\").Space<{ a: \"yikes\"; b: { c: \"a\"; }; }>"
            },
            "errors": "Type '\"yikes\"' is not assignable to type '\"Error: Unable to determine the type of 'yikes'.\"'.",
            "position": {
                "line": 26,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 33,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ b: { a: { b: { a: any; }; }; }; }"
            },
            "errors": "",
            "position": {
                "line": 40,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ b: { a: any; }; }"
            },
            "errors": "",
            "position": {
                "line": 50,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "Property 'c' does not exist on type '{ a: { b: ...; }; }'.",
            "position": {
                "line": 56,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "[{ c: string; }]"
            },
            "errors": "",
            "position": {
                "line": 61,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 69,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Type '\"c\"' is not assignable to type '\"Error: Unable to determine the type of 'c'.\"'.",
            "position": {
                "line": 72,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 80,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 86,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 89,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 90,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 91,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 92,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "\"a\""
            },
            "errors": "",
            "position": {
                "line": 93,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 94,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 99,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "Evaluate<{ [TypeName in Exclude<keyof Dict, import(\"/home/ssalb/2re-po/pkgs/model/src/space\").MetaKey>]: Dict[TypeName] | (Dict[TypeName] extends import(\"/home/ssalb/2re-po/pkgs/model/src/definitions/root\").Root.BadDefinitionType ? \"Error: Values of type 'function' or 'symbol' are not valid definitions.\" : Dict[TypeName] extends string ? import(\"/home/ssalb/2re-po/pkgs/model/src/definitions/str/str\").Str.FastParse<Dict[TypeName], Dict, { [K in TypeName]: true; }> : Dict[TypeName] extends RegExp ? string : Dict[TypeName] extends object ? import(\"/home/ssalb/2re-po/pkgs/model/src/definitions/obj/obj\").Obj.FastParse<Dict[TypeName], Dict, { [K in TypeName]: true; }> : Dict[TypeName] extends import(\"/home/ssalb/2re-po/pkgs/model/src/definitions/literal/literal\").Literal.PrimitiveLiteral ? Dict[TypeName] : \"Error: Unable to determine the type of your definition.\"); }>",
                "expected": "{ user: { age: number; }; group: { members: { age: number; }[]; }; other: { age: number; }[]; }"
            },
            "errors": "",
            "position": {
                "line": 136,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "import(\"/home/ssalb/2re-po/pkgs/model/src/space\").SpaceConfig<string>"
            },
            "errors": "",
            "position": {
                "line": 149,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ people: { name: string; }[]; groups: { members: { name: string; }[]; }[]; }"
            },
            "errors": "",
            "position": {
                "line": 179,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 189,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "",
            "position": {
                "line": 200,
                "char": 9
            }
        }
    ],
    "tests/declaration.assert.ts": [
        {
            "type": {
                "actual": "() => { [x: string]: \"string\"; }"
            },
            "errors": "Property 'SomethingUndeclared' does not exist on type 'DeclaredDefineFunctionMap<[\"GottaDefineThis\"]>'.",
            "position": {
                "line": 8,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => { [x: string]: \"whoops\"; }"
            },
            "errors": "Argument of type '\"whoops\"' is not assignable to parameter of type '\"Error: Unable to determine the type of 'whoops'.\"'.",
            "position": {
                "line": 13,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ a: boolean; }"
            },
            "errors": "",
            "position": {
                "line": 17,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => import(\"/home/ssalb/2re-po/pkgs/model/src/space\").Space<unknown>"
            },
            "errors": "Argument of type '{ GottaDefineThis: { a: \"string\"; }; }' is not assignable to parameter of type 'CheckDeclaredCompilation<{ GottaDefineThis: { a: \"string\"; }; }, [\"GottaDefineThis\", \"GottaDefineThisToo\"]>'.Property 'GottaDefineThisToo' is missing in type '{ GottaDefineThis: { a: \"string\"; }; }' but required in type 'CheckDeclaredCompilation<{ GottaDefineThis: { a: \"string\"; }; }, [\"GottaDefineThis\", \"GottaDefineThisToo\"]>'.",
            "position": {
                "line": 30,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => import(\"/home/ssalb/2re-po/pkgs/model/src/space\").Space<unknown>"
            },
            "errors": "Type '\"boolean\"' is not assignable to type '\"Invalid property 'CantDefineThis'. Valid properties are: GottaDefineThis\"'.\nType '\"string\"' is not assignable to type '\"Invalid property 'WontDefineThis'. Valid properties are: GottaDefineThis\"'.",
            "position": {
                "line": 37,
                "char": 9
            }
        }
    ],
    "tests/inheritableConfigs.assert.ts": [
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 16,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 28,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 41,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 55,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 76,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 80,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 82,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 86,
                "char": 13
            }
        }
    ],
    "tests/demo.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "{ name: { first: string; last: string; middle?: string | undefined; }; age: number; browser: \"other\" | \"chrome\" | \"firefox\" | null; }"
            },
            "errors": "",
            "position": {
                "line": 30,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 39,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 60,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 72,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ email: string; about: { age: number; bio: string; }; }"
            },
            "errors": "",
            "position": {
                "line": 100,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 107,
                "char": 9
            }
        }
    ],
    "tests/stress.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 458,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 913,
                "char": 9
            }
        }
    ],
    "tests/definitions/obj/map.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "{}"
            },
            "errors": "",
            "position": {
                "line": 9,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 12,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 13,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 18,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ a: string; b: number; c: 67; }"
            },
            "errors": "",
            "position": {
                "line": 30,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 38,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 43,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 56,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 70,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 75,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 80,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 91,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 104,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ nested: { russian: \"doll\"; }; }"
            },
            "errors": "",
            "position": {
                "line": 117,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Type '\"whoops\"' is not assignable to type '\"Error: Unable to determine the type of 'whoops'.\"'.",
            "position": {
                "line": 126,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 136,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 142,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 150,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 172,
                "char": 13
            }
        }
    ],
    "tests/definitions/obj/tuple.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "[]"
            },
            "errors": "",
            "position": {
                "line": 9,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 12,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 13,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 18,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "[string, number, 6]"
            },
            "errors": "",
            "position": {
                "line": 25,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Type '\"whoops\"' is not assignable to type '\"Error: Unable to determine the type of 'whoops'.\"'.",
            "position": {
                "line": 29,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 42,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 46,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 51,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 56,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 65,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "[\"Cuckoo\", [\"Swallow\", \"Oriole\", \"Condor\"], []]"
            },
            "errors": "",
            "position": {
                "line": 73,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 81,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 91,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 101,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 119,
                "char": 13
            }
        }
    ],
    "tests/definitions/obj/index.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "[true, { a: [string, [number | boolean[]]]; }]"
            },
            "errors": "",
            "position": {
                "line": 15,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 24,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 30,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 40,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 53,
                "char": 13
            }
        }
    ],
    "tests/definitions/literal/literal.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "4"
            },
            "errors": "",
            "position": {
                "line": 9,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "1.234"
            },
            "errors": "",
            "position": {
                "line": 12,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "-5.7"
            },
            "errors": "",
            "position": {
                "line": 15,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 21,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 22,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 23,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 26,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 30,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 31,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 32,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 38,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 39,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 42,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 49,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 52,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 55,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "999999999999999n"
            },
            "errors": "",
            "position": {
                "line": 62,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "-1n"
            },
            "errors": "",
            "position": {
                "line": 65,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 70,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 77,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 84,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 89,
                "char": 21
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 97,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 100,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "true"
            },
            "errors": "",
            "position": {
                "line": 108,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 111,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 114,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 115,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "false"
            },
            "errors": "",
            "position": {
                "line": 123,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 126,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 129,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 130,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "undefined"
            },
            "errors": "",
            "position": {
                "line": 139,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 142,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 145,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 146,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "null"
            },
            "errors": "",
            "position": {
                "line": 154,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 157,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 160,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 161,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 169,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 172,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 177,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 178,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 181,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/constraint.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 7,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number"
            },
            "errors": "",
            "position": {
                "line": 10,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"number<integer\"' is not assignable to parameter of type '\"Error: 'integer' must be a number literal to bound 'number'.\"'.",
            "position": {
                "line": 15,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"null<number<5\"' is not assignable to parameter of type '\"Error: 'null' must be a number literal to bound 'number'.\"'.",
            "position": {
                "line": 21,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"1<number<string\"' is not assignable to parameter of type '\"Error: 'string' must be a number literal to bound 'number'.\"'.",
            "position": {
                "line": 27,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"number<number<number\"' is not assignable to parameter of type '\"Error: 'number' must be a number literal to bound 'number'.\"'.",
            "position": {
                "line": 32,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"object<999\"' is not assignable to parameter of type '\"Error: Bounded definition 'object' must be a number or string keyword.\"'.",
            "position": {
                "line": 41,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"1<object<999\"' is not assignable to parameter of type '\"Error: Bounded definition 'object' must be a number or string keyword.\"'.",
            "position": {
                "line": 47,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"null<object<true\"' is not assignable to parameter of type '\"Error: Bounded definition 'object' must be a number or string keyword.\"'.",
            "position": {
                "line": 53,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"1<2<number<4\"' is not assignable to parameter of type '\"Error: Constraints must be either of the form N<L or L<N<L, where N is a constrainable type (e.g. number), L is a number literal (e.g. 5), and < is any comparison operator.\"'.",
            "position": {
                "line": 59,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 67,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 70,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 71,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 72,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 73,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 74,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 79,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 80,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 81,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 82,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 83,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 84,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 87,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 88,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 89,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 90,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 91,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 92,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 98,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 101,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 104,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 107,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 112,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 115,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 123,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 126,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 129,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 132,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 135,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 138,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 143,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 146,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 149,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 152,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 155,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 158,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 161,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 164,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 167,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 175,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/intersection.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "true"
            },
            "errors": "",
            "position": {
                "line": 7,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "false"
            },
            "errors": "",
            "position": {
                "line": 10,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "never"
            },
            "errors": "",
            "position": {
                "line": 14,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"boolean&tru\"' is not assignable to parameter of type '\"Error: Unable to determine the type of 'tru'.\"'.",
            "position": {
                "line": 19,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"boolean&&true\"' is not assignable to parameter of type '\"Error: Unable to determine the type of ''.\"'.",
            "position": {
                "line": 25,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 33,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 36,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 41,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 46,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 51,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 56,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 63,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 71,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/list.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string[]"
            },
            "errors": "",
            "position": {
                "line": 8,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number[][]"
            },
            "errors": "",
            "position": {
                "line": 11,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"nonexistent[]\"' is not assignable to parameter of type '\"Error: Unable to determine the type of 'nonexistent'.\"'.",
            "position": {
                "line": 16,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"boolean[\"' is not assignable to parameter of type '\"Error: Unable to determine the type of 'boolean['.\"'.",
            "position": {
                "line": 22,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"[any]\"' is not assignable to parameter of type '\"Error: Unable to determine the type of '[any]'.\"'.",
            "position": {
                "line": 28,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 37,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 40,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 43,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 49,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 54,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 62,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/union.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string | number"
            },
            "errors": "",
            "position": {
                "line": 8,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number | false | \"\" | null | undefined"
            },
            "errors": "",
            "position": {
                "line": 11,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"number|sting\"' is not assignable to parameter of type '\"Error: Unable to determine the type of 'sting'.\"'.",
            "position": {
                "line": 21,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"boolean||null\"' is not assignable to parameter of type '\"Error: Unable to determine the type of ''.\"'.",
            "position": {
                "line": 27,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 35,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 38,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 45,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 50,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 58,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 59,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 60,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 70,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 71,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 74,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 89,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/bigintLiteral.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "bigint"
            },
            "errors": "",
            "position": {
                "line": 7,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "bigint"
            },
            "errors": "",
            "position": {
                "line": 10,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"99999.99n\"' is not assignable to parameter of type '\"Error: Unable to determine the type of '99999.99n'.\"'.",
            "position": {
                "line": 15,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 23,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 30,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 36,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 41,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 49,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 52,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/numberLiteral.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "number"
            },
            "errors": "",
            "position": {
                "line": 10,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number"
            },
            "errors": "",
            "position": {
                "line": 13,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number"
            },
            "errors": "",
            "position": {
                "line": 16,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"127.0.0.1\"' is not assignable to parameter of type '\"Error: Unable to determine the type of '127.0.0.1'.\"'.",
            "position": {
                "line": 21,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"13three7\"' is not assignable to parameter of type '\"Error: Unable to determine the type of '13three7'.\"'.",
            "position": {
                "line": 27,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 36,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 37,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 38,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 41,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 45,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 46,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 47,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 53,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 54,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 55,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 62,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 65,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 68,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/stringLiteral.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "\"hello\""
            },
            "errors": "",
            "position": {
                "line": 7,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "\"goodbye\""
            },
            "errors": "",
            "position": {
                "line": 10,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "\"'single-quoted'\""
            },
            "errors": "",
            "position": {
                "line": 13,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "\"\\\"double-quoted\\\"\""
            },
            "errors": "",
            "position": {
                "line": 16,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "\"this has spaces\""
            },
            "errors": "",
            "position": {
                "line": 19,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"'mismatched\"' is not assignable to parameter of type '\"Error: Unable to determine the type of ''mismatched'.\"'.",
            "position": {
                "line": 24,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"\\\"mismatched'\"' is not assignable to parameter of type '\"Error: Unable to determine the type of '\\\"mismatched''.\"'.",
            "position": {
                "line": 30,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"'this isn't allowed'\"' is not assignable to parameter of type '\"Error: Unable to determine the type of ''this isn't allowed''.\"'.",
            "position": {
                "line": 35,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"\\\"not \\\"ok\\\"\\\"\"' is not assignable to parameter of type '\"Error: Unable to determine the type of '\\\"not \\\"ok\\\"\\\"'.\"'.",
            "position": {
                "line": 43,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 54,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 58,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 66,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/keyword.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 8,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 11,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 14,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 15,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number"
            },
            "errors": "",
            "position": {
                "line": 23,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 26,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 29,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 30,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 31,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "boolean"
            },
            "errors": "",
            "position": {
                "line": 39,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 42,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 45,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 46,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 47,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "true"
            },
            "errors": "",
            "position": {
                "line": 55,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 58,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 61,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 62,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "false"
            },
            "errors": "",
            "position": {
                "line": 70,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 73,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 76,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 77,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "bigint"
            },
            "errors": "",
            "position": {
                "line": 85,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 88,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 91,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 92,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "symbol"
            },
            "errors": "",
            "position": {
                "line": 100,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\""
            },
            "errors": "",
            "position": {
                "line": 103,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 106,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 107,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "(...args: any[]) => any"
            },
            "errors": "",
            "position": {
                "line": 115,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\""
            },
            "errors": "",
            "position": {
                "line": 119,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 120,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 123,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 124,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "object"
            },
            "errors": "",
            "position": {
                "line": 132,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 135,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 138,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 139,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 140,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "undefined"
            },
            "errors": "",
            "position": {
                "line": 148,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 151,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 154,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 155,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "null"
            },
            "errors": "",
            "position": {
                "line": 163,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 166,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 169,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 170,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "void"
            },
            "errors": "",
            "position": {
                "line": 178,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 181,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 184,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 185,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "any"
            },
            "errors": "",
            "position": {
                "line": 193,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 196,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 199,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 200,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 201,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "unknown"
            },
            "errors": "",
            "position": {
                "line": 208,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 211,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 214,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 215,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 216,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "never"
            },
            "errors": "",
            "position": {
                "line": 223,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 226,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 231,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 234,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 242,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 243,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 244,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 250,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 251,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 252,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 258,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 259,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 260,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 266,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 267,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 270,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 276,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 277,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 280,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 286,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 287,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 288,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number"
            },
            "errors": "",
            "position": {
                "line": 296,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 297,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 298,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number"
            },
            "errors": "",
            "position": {
                "line": 304,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 305,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 306,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "number"
            },
            "errors": "",
            "position": {
                "line": 312,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 313,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 314,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/regex.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 7,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"/.*\"' is not assignable to parameter of type '\"Error: Unable to determine the type of '/.*'.\"'.",
            "position": {
                "line": 12,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"/.*//\"' is not assignable to parameter of type '\"Error: Unable to determine the type of '/.*//'.\"'.",
            "position": {
                "line": 18,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 26,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 29,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 36,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 41,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 46,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 58,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/alias.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "true"
            },
            "errors": "",
            "position": {
                "line": 8,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ snorf: { f: false; u: undefined; }[]; }"
            },
            "errors": "",
            "position": {
                "line": 16,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 40,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 43,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 46,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "true"
            },
            "errors": "",
            "position": {
                "line": 64,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "true"
            },
            "errors": "",
            "position": {
                "line": 65,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "Property 'wasResolved' does not exist on type '{ favoriteSoup: \"borscht\"; }'.",
            "position": {
                "line": 68,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "any"
            },
            "errors": "",
            "position": {
                "line": 228,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => any",
                "expected": "() => { literal: string; alias: any; }"
            },
            "errors": "",
            "position": {
                "line": 235,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 239,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "[number, any]"
            },
            "errors": "",
            "position": {
                "line": 245,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/integration.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "boolean[] | number[] | null"
            },
            "errors": "",
            "position": {
                "line": 8,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "\"maybe\" | \"no\" | \"yes\""
            },
            "errors": "",
            "position": {
                "line": 14,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "\"yes|no|maybe\""
            },
            "errors": "",
            "position": {
                "line": 20,
                "char": 13
            }
        }
    ],
    "tests/definitions/str/optional.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string | undefined"
            },
            "errors": "",
            "position": {
                "line": 7,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any",
                "expected": "{ required: boolean; optional?: boolean | undefined; }"
            },
            "errors": "",
            "position": {
                "line": 10,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"nonexistent?\"' is not assignable to parameter of type '\"Error: Unable to determine the type of 'nonexistent'.\"'.",
            "position": {
                "line": 23,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"boolean??\"' is not assignable to parameter of type '\"Modifier '?' is only valid at the end of a type definition.\"'.",
            "position": {
                "line": 29,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Type '\"number?|string?\"' is not assignable to type '\"Modifier '?' is only valid at the end of a type definition.\"'.",
            "position": {
                "line": 34,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Argument of type '\"boolean?|string|number\"' is not assignable to parameter of type '\"Modifier '?' is only valid at the end of a type definition.\"'.",
            "position": {
                "line": 45,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 56,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 59,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 62,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 71,
                "char": 17
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 79,
                "char": 13
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 82,
                "char": 13
            }
        }
    ],
    "tests/definitions/root.assert.ts": [
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Type 'symbol' is not assignable to type '\"Error: Values of type 'function' or 'symbol' are not valid definitions.\"'.",
            "position": {
                "line": 14,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => Evaluate<{ definition: Def; type: ModelType; config: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ModelOptions; validate: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateFunction; assert: (value: unknown, options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ValidateConfig | undefined) => void; generate: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").GenerateConfig | undefined) => ModelType; references: (options?: import(\"/home/ssalb/2re-po/pkgs/model/src/model\").ReferencesConfig | undefined) => any; }>"
            },
            "errors": "Type '() => {}' is not assignable to type '\"Error: Values of type 'function' or 'symbol' are not valid definitions.\"'.",
            "position": {
                "line": 18,
                "char": 9
            }
        }
    ],
    "tests/definitions/multifile.assert.ts": [
        {
            "type": {
                "actual": "any",
                "expected": "string"
            },
            "errors": "",
            "position": {
                "line": 14,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 15,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 18,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 21,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 24,
                "char": 9
            }
        }
    ],
    "tests/customValidators.test.ts": [
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 18,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 21,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 30,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 33,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 48,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 51,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "() => any"
            },
            "errors": "",
            "position": {
                "line": 71,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 74,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 102,
                "char": 9
            }
        },
        {
            "type": {
                "actual": "any"
            },
            "errors": "",
            "position": {
                "line": 103,
                "char": 9
            }
        }
    ]
}
