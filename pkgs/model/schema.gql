### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Mutation {
  createOneSelector(data: SelectorCreateInput!): Selector!
  createOneStep(data: StepCreateInput!): Step!
  createOneTag(data: TagCreateInput!): Tag!
  createOneTest(data: TestCreateInput!): Test!
  createOneUser(data: UserCreateInput!): User!
}

type Query {
  selector(where: SelectorWhereUniqueInput!): Selector
  step(where: StepWhereUniqueInput!): Step
  tag(where: TagWhereUniqueInput!): Tag
  test(where: TestWhereUniqueInput!): Test
  user(where: UserWhereUniqueInput!): User
}

type Selector {
  css: String!
  id: Int!
}

input SelectorCreateInput {
  css: String!
  steps: StepCreateManyWithoutStepsInput
  user: UserCreateOneWithoutUserInput
}

input SelectorCreateManyWithoutSelectorsInput {
  connect: [SelectorWhereUniqueInput!]
  create: [SelectorCreateWithoutUserInput!]
}

input SelectorCreateOneWithoutSelectorInput {
  connect: SelectorWhereUniqueInput
  create: SelectorCreateWithoutStepsInput
}

input SelectorCreateWithoutStepsInput {
  css: String!
  user: UserCreateOneWithoutUserInput
}

input SelectorCreateWithoutUserInput {
  css: String!
  steps: StepCreateManyWithoutStepsInput
}

input SelectorWhereUniqueInput {
  id: Int
}

type Step {
  action: String!
  id: Int!
  selector: Selector!
  value: String!
}

input StepCreateInput {
  action: String!
  selector: SelectorCreateOneWithoutSelectorInput!
  test: TestCreateOneWithoutTestInput
  user: UserCreateOneWithoutUserInput
  value: String!
}

input StepCreateManyWithoutStepsInput {
  connect: [StepWhereUniqueInput!]
  create: [StepCreateWithoutSelectorInput!]
}

input StepCreateWithoutSelectorInput {
  action: String!
  test: TestCreateOneWithoutTestInput
  user: UserCreateOneWithoutUserInput
  value: String!
}

input StepWhereUniqueInput {
  id: Int
}

type Tag {
  id: Int!
  name: String!
}

input TagCreateInput {
  name: String!
  test: TestCreateOneWithoutTestInput
  user: UserCreateOneWithoutUserInput!
}

input TagCreateManyWithoutTagsInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutTestInput!]
}

input TagCreateWithoutTestInput {
  name: String!
  user: UserCreateOneWithoutUserInput!
}

input TagWhereUniqueInput {
  id: Int
}

type Test {
  id: Int!
  name: String!
  steps(after: String, before: String, first: Int, last: Int, skip: Int): [Step!]!
  tags(after: String, before: String, first: Int, last: Int, skip: Int): [Tag!]!
}

input TestCreateInput {
  name: String!
  steps: StepCreateManyWithoutStepsInput
  tags: TagCreateManyWithoutTagsInput
  user: UserCreateOneWithoutUserInput!
}

input TestCreateManyWithoutTestsInput {
  connect: [TestWhereUniqueInput!]
  create: [TestCreateWithoutUserInput!]
}

input TestCreateOneWithoutTestInput {
  connect: TestWhereUniqueInput
  create: TestCreateWithoutStepsInput
}

input TestCreateWithoutStepsInput {
  name: String!
  tags: TagCreateManyWithoutTagsInput
  user: UserCreateOneWithoutUserInput!
}

input TestCreateWithoutUserInput {
  name: String!
  steps: StepCreateManyWithoutStepsInput
  tags: TagCreateManyWithoutTagsInput
}

input TestWhereUniqueInput {
  id: Int
}

type User {
  firstName: String!
  id: Int!
  lastName: String!
  password: String!
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  selectors: SelectorCreateManyWithoutSelectorsInput
  steps: StepCreateManyWithoutStepsInput
  tags: TagCreateManyWithoutTagsInput
  tests: TestCreateManyWithoutTestsInput
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTagsInput
}

input UserCreateWithoutTagsInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  selectors: SelectorCreateManyWithoutSelectorsInput
  steps: StepCreateManyWithoutStepsInput
  tests: TestCreateManyWithoutTestsInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
