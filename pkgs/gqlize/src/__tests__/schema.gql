### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type AssertTextData {
    expected: String!
    id: Int!
    selector: String!
    stepDatas(
        after: StepDataWhereUniqueInput
        before: StepDataWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [StepData!]!
}

input AssertTextDataCreateWithoutStepDatasInput {
    expected: String!
    selector: String!
}

type AssertVisibilityData {
    expected: Boolean!
    id: Int!
    selector: String!
    stepDatas(
        after: StepDataWhereUniqueInput
        before: StepDataWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [StepData!]!
}

input AssertVisibilityDataCreateWithoutStepDatasInput {
    expected: Boolean!
    selector: String!
}

type ClickData {
    double: Boolean!
    id: Int!
    selector: String!
    stepDatas(
        after: StepDataWhereUniqueInput
        before: StepDataWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [StepData!]!
}

input ClickDataCreateWithoutStepDatasInput {
    double: Boolean
    selector: String!
}

type GoData {
    id: Int!
    stepDatas(
        after: StepDataWhereUniqueInput
        before: StepDataWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [StepData!]!
    url: String!
}

input GoDataCreateWithoutStepDatasInput {
    url: String!
}

type HoverData {
    duration: Int!
    id: Int!
    selector: String!
    stepDatas(
        after: StepDataWhereUniqueInput
        before: StepDataWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [StepData!]!
}

input HoverDataCreateWithoutStepDatasInput {
    duration: Int!
    selector: String!
}

type KeyData {
    id: Int!
    key: String!
    stepDatas(
        after: StepDataWhereUniqueInput
        before: StepDataWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [StepData!]!
}

input KeyDataCreateWithoutStepDatasInput {
    key: String!
}

type Mutation {
    createTest(data: TestCreateInput!): Test!
    signIn(data: SignInInput!): String!
    signUp(data: SignUpInput!): String!
}

input NameUserCompoundUniqueInput {
    name: String!
}

type Query {
    me: User!
}

type SetData {
    id: Int!
    selector: String!
    stepDatas(
        after: StepDataWhereUniqueInput
        before: StepDataWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [StepData!]!
    value: String!
}

input SetDataCreateWithoutStepDatasInput {
    selector: String!
    value: String!
}

input SignInInput {
    email: String!
    password: String!
}

input SignUpInput {
    email: String!
    first: String!
    last: String!
    password: String!
}

type Step {
    data: StepData!
    id: Int!
    kind: StepKind!
    tests(
        after: TestWhereUniqueInput
        before: TestWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Test!]!
    user: User
}

input StepCreateWithoutTestsInput {
    data: StepDataCreateWithoutStepsInput!
    kind: StepKind!
}

type StepData {
    assertText: AssertTextData
    assertVisibility: AssertVisibilityData
    click: ClickData
    go: GoData
    hover: HoverData
    id: Int!
    key: KeyData
    set: SetData
    steps(
        after: StepWhereUniqueInput
        before: StepWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Step!]!
}

input StepDataCreateWithoutStepsInput {
    assertText: AssertTextDataCreateWithoutStepDatasInput
    assertVisibility: AssertVisibilityDataCreateWithoutStepDatasInput
    click: ClickDataCreateWithoutStepDatasInput
    go: GoDataCreateWithoutStepDatasInput
    hover: HoverDataCreateWithoutStepDatasInput
    key: KeyDataCreateWithoutStepDatasInput
    set: SetDataCreateWithoutStepDatasInput
}

input StepDataWhereUniqueInput {
    id: Int
}

enum StepKind {
    assertText
    assertVisibility
    click
    go
    hover
    key
    screenshot
    set
}

input StepWhereUniqueInput {
    id: Int
}

type Tag {
    id: Int!
    name: String!
    test: Test
    user: User!
}

input TagCreateWithoutTestInput {
    name: String!
}

input TagWhereUniqueInput {
    id: Int
    name_user: NameUserCompoundUniqueInput
}

type Test {
    id: Int!
    name: String!
    steps(
        after: StepWhereUniqueInput
        before: StepWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Step!]!
    tags(
        after: TagWhereUniqueInput
        before: TagWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Tag!]!
    user: User!
}

input TestCreateInput {
    name: String!
    steps: StepCreateWithoutTestsInput
    tags: TagCreateWithoutTestInput
}

input TestWhereUniqueInput {
    id: Int
    name_user: NameUserCompoundUniqueInput
}

type User {
    email: String!
    first: String!
    id: Int!
    last: String!
    password: String!
    steps(
        after: StepWhereUniqueInput
        before: StepWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Step!]!
    tags(
        after: TagWhereUniqueInput
        before: TagWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Tag!]!
    tests(
        after: TestWhereUniqueInput
        before: TestWhereUniqueInput
        first: Int
        last: Int
        skip: Int
    ): [Test!]!
}
