### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Mutation {
    createOneTest(data: TestCreateInput!): Test!
    signIn(data: SignInInput!): String!
    signUp(data: SignUpInput!): String!
}

type Query {
    selector(where: SelectorWhereUniqueInput!): Selector
    selectors(
        after: Int
        before: Int
        first: Int
        last: Int
        skip: Int
    ): [Selector!]!
    step(where: StepWhereUniqueInput!): Step
    steps(after: Int, before: Int, first: Int, last: Int, skip: Int): [Step!]!
    tag(where: TagWhereUniqueInput!): Tag
    tags(after: Int, before: Int, first: Int, last: Int, skip: Int): [Tag!]!
    test(where: TestWhereUniqueInput!): Test
    tests(after: Int, before: Int, first: Int, last: Int, skip: Int): [Test!]!
    user(where: UserWhereUniqueInput!): User
    users(after: Int, before: Int, first: Int, last: Int, skip: Int): [User!]!
}

type Selector {
    css: String!
    id: Int!
}

input SelectorCreateOneWithoutSelectorInput {
    connect: SelectorWhereUniqueInput
    create: SelectorCreateWithoutStepsInput
}

input SelectorCreateWithoutStepsInput {
    css: String!
}

input SelectorWhereUniqueInput {
    id: Int
}

input SignInInput {
    email: String!
    password: String!
}

input SignUpInput {
    email: String!
    first: String!
    last: String!
    password: String!
}

type Step {
    action: String!
    id: Int!
    selector: Selector!
    value: String!
}

input StepCreateManyWithoutStepsInput {
    connect: [StepWhereUniqueInput!]
    create: [StepCreateWithoutUserInput!]
}

input StepCreateWithoutUserInput {
    action: String!
    selector: SelectorCreateOneWithoutSelectorInput!
    test: TestCreateOneWithoutTestInput
    value: String!
}

input StepWhereUniqueInput {
    id: Int
}

type Tag {
    id: Int!
    name: String!
}

input TagCreateManyWithoutTagsInput {
    connect: [TagWhereUniqueInput!]
    create: [TagCreateWithoutTestInput!]
}

input TagCreateWithoutTestInput {
    name: String!
}

input TagWhereUniqueInput {
    id: Int
}

type Test {
    id: Int!
    name: String!
    steps(after: Int, before: Int, first: Int, last: Int, skip: Int): [Step!]!
    tags(after: Int, before: Int, first: Int, last: Int, skip: Int): [Tag!]!
}

input TestCreateInput {
    name: String!
    steps: StepCreateManyWithoutStepsInput
    tags: TagCreateManyWithoutTagsInput
}

input TestCreateOneWithoutTestInput {
    connect: TestWhereUniqueInput
    create: TestCreateWithoutStepsInput
}

input TestCreateWithoutStepsInput {
    name: String!
    tags: TagCreateManyWithoutTagsInput
}

input TestWhereUniqueInput {
    id: Int
}

type User {
    email: String!
    first: String!
    id: Int!
    last: String!
    password: String!
    selectors(
        after: Int
        before: Int
        first: Int
        last: Int
        skip: Int
    ): [Selector!]!
    steps(after: Int, before: Int, first: Int, last: Int, skip: Int): [Step!]!
    tags(after: Int, before: Int, first: Int, last: Int, skip: Int): [Tag!]!
    tests(after: Int, before: Int, first: Int, last: Int, skip: Int): [Test!]!
}

input UserWhereUniqueInput {
    email: String
    id: Int
}
