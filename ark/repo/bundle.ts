import { basename, join } from "node:path"
import { build } from "tsup"

import {
	bootstrapFs,
	packagesByScope,
	repoDirs,
	type PackageScope
} from "./shared.ts"

const { readFile, rmSync, writeFile } = bootstrapFs

type BundleOptions = {
	js: boolean
	dts: boolean
}

export const bundle = async (options: BundleOptions) => {
	const pkgScope = basename(process.cwd()) as PackageScope
	const pkg = packagesByScope[pkgScope]

	console.log(`ðŸ“¦ Generating bundle for ${pkg.name}...`)

	await build({
		entry: ["index.ts"],
		format: "esm",
		target: options.js ? "esnext" : [],
		noExternal: ["@ark/schema", "@ark/util"],
		keepNames: true,
		dts: {
			only: !options.js
		},
		outDir: "."
	})

	// Initialize output content
	let outputContent =
		`/** THIS FILE IS AUTOGENERATED FROM ark/repo/bundle.ts **/\n` +
		`// prettier-ignore\n`

	if (options.js) {
		const jsPath = join(pkg.path, "index.js")
		const jsContent = readFile(jsPath)
		rmSync(jsPath)

		outputContent += `export const ${pkg.scope}Js = ${JSON.stringify(jsContent)}\n`
	}

	if (options.dts) {
		const dtsPath = join(pkg.path, "index.d.ts")
		const dtsContent = readFile(dtsPath)
		rmSync(dtsPath)

		outputContent += `export const ${pkg.scope}Dts = ${JSON.stringify(
			`declare module "${pkg.name}" {\n${dtsContent}\n}`
		)}\n`
	}

	// Write the combined output once
	writeFile(
		join(repoDirs.docs, "components", "bundles", `${pkgScope}.ts`),
		outputContent
	)

	console.log(`âœ… Bundle generation complete for ${pkg.name}!`)
	console.log(`   ${options.js ? "â€¢ JS bundle created" : ""}`)
	console.log(`   ${options.dts ? "â€¢ DTS bundle created" : ""}`)
}
