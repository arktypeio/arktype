import { basename, join } from "node:path"
import {
	bootstrapFs,
	packagesByScope,
	repoDirs,
	type PackageScope
} from "./shared.ts"

const { readFile, shell, rmSync, writeFile } = bootstrapFs

type BundleOptions = {
	js: boolean
	dts: boolean
}

export const bundle = (options: BundleOptions) => {
	const pkgScope = basename(process.cwd()) as PackageScope
	const pkg = packagesByScope[pkgScope]

	console.log(`ðŸ“¦ Generating bundle for ${pkg.name}...`)

	// Build tsup command based on options
	const tsupArgs = [
		"pnpm tsup index.ts",
		"--format esm",
		options.js ? "--target esnext" : "",
		options.dts ? "--dts --dts-resolve" : "--dts-only=false",
		"--no-splitting",
		`--out-dir ${join(pkg.path, "dist")}`
	]
		.filter(Boolean)
		.join(" ")

	shell(tsupArgs)

	// Handle JS output if requested
	if (options.js) {
		const jsPath = join(pkg.path, "dist", "index.js")
		const jsContent = readFile(jsPath)
		rmSync(jsPath)

		writeFile(
			join(repoDirs.docs, "components", "bundles", `${pkgScope}.js`),
			`/** AUTOGENERATED - DO NOT EDIT DIRECTLY **/\n` +
				`// Source: ${pkg.name}\n` +
				`// Generated at: ${new Date().toISOString()}\n\n` +
				jsContent
		)
	}

	// Handle DTS output if requested
	if (options.dts) {
		const dtsPath = join(pkg.path, "dist", "index.d.ts")
		const dtsContent = readFile(dtsPath)
		rmSync(dtsPath)

		writeFile(
			join(repoDirs.docs, "components", "bundles", `${pkgScope}.ts`),
			`/** THIS FILE IS AUTOGENERATED FROM ark/repo/bundle.ts **/\n` +
				`// prettier-ignore\n` +
				`export const ${pkg.scope}Dts = ${JSON.stringify(
					`declare module "${pkg.name}" {\n${dtsContent}\n}`
				)}\n`
		)
	}

	console.log(`âœ… Bundle generation complete for ${pkg.name}!`)
	console.log(`   ${options.js ? "â€¢ JS bundle created" : ""}`)
	console.log(`   ${options.dts ? "â€¢ DTS bundle created" : ""}`)
}
