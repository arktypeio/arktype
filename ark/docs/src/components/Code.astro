---
import { arkHighlight, type HighlightArgs, type BuiltinLang } from "./highlight.ts"

// ideally we could just import { Code } from "astro:components" instead of
// using this custom component, but as of now, the `Code` component imported from
// `astro:components` does not apply our shikiConfig.

// If it does in the future, this component can be deleted.

interface Props extends HighlightArgs {
    code: string
    lang?: BuiltinLang
}

const html = await arkHighlight(Astro.props)
---

<div class="code-container">
    <Fragment set:html={html} />
    <button class="copy-button">
        <img class="copy-icon" src= "/src/assets/copy.svg" />
    </button>
</div>


<script>
const distillTwoslashCode = (container: Element): string => {
    const hoverSelector = ".twoslash-popup-code"
    const errorSelector = ".twoslash-error-line"
    const completionSelector = ".twoslash-completion-cursor"
    const metaSelector = `${hoverSelector}, ${errorSelector}, ${completionSelector}`
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT)

    let textContent = ""
    while (walker.nextNode()) {
        const parentNode = walker.currentNode.parentNode as Element;
        if (parentNode.closest(errorSelector)) {
            // if a twoslash error was rendered in this position, we need an additional newline
            textContent += "\n"
        }
        if (!parentNode?.closest(metaSelector)) {
            // if the node is not a meta node (hover, error or completion) add its textContent
            textContent += walker.currentNode.textContent ?? ""
        }
    }

    return textContent.trim()
}

document
	.querySelectorAll(".code-container")
	.forEach((codeContainer: Element) => {
		const copyButton = codeContainer.querySelector(".copy-button")!
		const icon = codeContainer.querySelector(".copy-icon")!

		copyButton.addEventListener("click", async () => {
			const textToCopy = distillTwoslashCode(codeContainer)
			await navigator.clipboard.writeText(textToCopy)

			icon.setAttribute("src", "/src/assets/check.svg")
            copyButton.setAttribute("disabled", "1")
			setTimeout(() => {
				icon.setAttribute("src", "/src/assets/copy.svg")
                copyButton.removeAttribute("disabled")
			}, 2000)
		})
	})
</script>
